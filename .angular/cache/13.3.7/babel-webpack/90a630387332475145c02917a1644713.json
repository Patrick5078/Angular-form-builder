{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewContainerRef, ContentChildren, HostBinding, ViewChild, ViewChildren, forwardRef, NgModule } from '@angular/core';\nimport * as i1 from '@ng-dynamic-forms/core';\nimport { DynamicFormControlComponent, DynamicFormControlContainerComponent, DynamicTemplateDirective, DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DYNAMIC_FORM_CONTROL_TYPE_SELECT, DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP, DYNAMIC_FORM_CONTROL_TYPE_INPUT, DYNAMIC_FORM_CONTROL_TYPE_GROUP, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DynamicFormArrayComponent, DynamicFormGroupComponent, DynamicFormComponent, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';\nimport * as i2 from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from 'ngx-mask';\nimport { NgxMaskModule } from 'ngx-mask';\n\nconst _c0 = function (a0, a1) {\n  return [a0, a1];\n};\n\nfunction DynamicBasicInputComponent_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 4);\n    i0.ɵɵlistener(\"blur\", function DynamicBasicInputComponent_input_1_Template_input_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onBlur($event);\n    })(\"change\", function DynamicBasicInputComponent_input_1_Template_input_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.onChange($event);\n    })(\"focus\", function DynamicBasicInputComponent_input_1_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onFocus($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"autocomplete\", ctx_r0.model.autoComplete)(\"autofocus\", ctx_r0.model.autoFocus)(\"dynamicList\", ctx_r0.model.listId)(\"formControlName\", ctx_r0.model.id)(\"id\", ctx_r0.id)(\"maxlength\", ctx_r0.model.maxLength)(\"minlength\", ctx_r0.model.minLength)(\"name\", ctx_r0.model.name)(\"ngClass\", i0.ɵɵpureFunction2(21, _c0, ctx_r0.getClass(\"element\", \"control\"), ctx_r0.getClass(\"grid\", \"control\")))(\"pattern\", ctx_r0.model.pattern)(\"placeholder\", ctx_r0.model.placeholder)(\"readonly\", ctx_r0.model.readOnly)(\"required\", ctx_r0.model.required)(\"spellcheck\", ctx_r0.model.spellCheck)(\"tabindex\", ctx_r0.model.tabIndex)(\"type\", ctx_r0.model.inputType);\n    i0.ɵɵattribute(\"accept\", ctx_r0.model.accept)(\"max\", ctx_r0.model.max)(\"min\", ctx_r0.model.min)(\"multiple\", ctx_r0.model.multiple)(\"step\", ctx_r0.model.step);\n  }\n}\n\nfunction DynamicBasicInputComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 5);\n    i0.ɵɵlistener(\"blur\", function DynamicBasicInputComponent_ng_template_2_Template_input_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.onBlur($event);\n    })(\"change\", function DynamicBasicInputComponent_ng_template_2_Template_input_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.onChange($event);\n    })(\"focus\", function DynamicBasicInputComponent_ng_template_2_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onFocus($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"autocomplete\", ctx_r2.model.autoComplete)(\"autofocus\", ctx_r2.model.autoFocus)(\"dynamicList\", ctx_r2.model.listId)(\"formControlName\", ctx_r2.model.id)(\"id\", ctx_r2.id)(\"maxlength\", ctx_r2.model.maxLength)(\"minlength\", ctx_r2.model.minLength)(\"name\", ctx_r2.model.name)(\"ngClass\", i0.ɵɵpureFunction2(39, _c0, ctx_r2.getClass(\"element\", \"control\"), ctx_r2.getClass(\"grid\", \"control\")))(\"pattern\", ctx_r2.model.pattern)(\"placeholder\", ctx_r2.model.placeholder)(\"readonly\", ctx_r2.model.readOnly)(\"required\", ctx_r2.model.required)(\"spellcheck\", ctx_r2.model.spellCheck)(\"tabindex\", ctx_r2.model.tabIndex)(\"mask\", ctx_r2.model.mask)(\"specialCharacters\", ctx_r2.model.maskConfig == null ? null : ctx_r2.model.maskConfig.specialCharacters)(\"patterns\", ctx_r2.model.maskConfig == null ? null : ctx_r2.model.maskConfig.patterns)(\"prefix\", ctx_r2.model.maskConfig == null ? null : ctx_r2.model.maskConfig.prefix)(\"suffix\", ctx_r2.model.maskConfig == null ? null : ctx_r2.model.maskConfig.suffix)(\"thousandSeparator\", ctx_r2.model.maskConfig == null ? null : ctx_r2.model.maskConfig.thousandSeparator)(\"decimalMarker\", ctx_r2.model.maskConfig == null ? null : ctx_r2.model.maskConfig.decimalMarker)(\"dropSpecialCharacters\", ctx_r2.model.maskConfig == null ? null : ctx_r2.model.maskConfig.dropSpecialCharacters)(\"hiddenInput\", ctx_r2.model.maskConfig == null ? null : ctx_r2.model.maskConfig.hiddenInput)(\"showMaskTyped\", ctx_r2.model.maskConfig == null ? null : ctx_r2.model.maskConfig.showMaskTyped)(\"placeHolderCharacter\", ctx_r2.model.maskConfig == null ? null : ctx_r2.model.maskConfig.placeHolderCharacter)(\"shownMaskExpression\", ctx_r2.model.maskConfig == null ? null : ctx_r2.model.maskConfig.shownMaskExpression)(\"showTemplate\", ctx_r2.model.maskConfig == null ? null : ctx_r2.model.maskConfig.showTemplate)(\"clearIfNotMatch\", ctx_r2.model.maskConfig.clearIfNotMatch)(\"validation\", ctx_r2.model.maskConfig.validation)(\"separatorLimit\", ctx_r2.model.maskConfig.separatorLimit)(\"allowNegativeNumbers\", ctx_r2.model.maskConfig.allowNegativeNumbers)(\"leadZeroDateTime\", ctx_r2.model.maskConfig.leadZeroDateTime)(\"type\", ctx_r2.model.inputType);\n    i0.ɵɵattribute(\"accept\", ctx_r2.model.accept)(\"max\", ctx_r2.model.max)(\"min\", ctx_r2.model.min)(\"multiple\", ctx_r2.model.multiple)(\"step\", ctx_r2.model.step);\n  }\n}\n\nfunction DynamicBasicInputComponent_datalist_4_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"option\", 8);\n  }\n\n  if (rf & 2) {\n    const option_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r13);\n  }\n}\n\nfunction DynamicBasicInputComponent_datalist_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"datalist\", 6);\n    i0.ɵɵtemplate(1, DynamicBasicInputComponent_datalist_4_option_1_Template, 1, 1, \"option\", 7);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r3.model.listId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 2, ctx_r3.model.list$));\n  }\n}\n\nfunction DynamicBasicRadioGroupComponent_legend_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"legend\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.model.legend, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction DynamicBasicRadioGroupComponent_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"label\", 4)(1, \"input\", 5);\n    i0.ɵɵlistener(\"blur\", function DynamicBasicRadioGroupComponent_label_2_Template_input_blur_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onBlur($event);\n    })(\"focus\", function DynamicBasicRadioGroupComponent_label_2_Template_input_focus_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onFocus($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(2, \"span\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.getClass(\"element\", \"option\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", ctx_r1.model.id)(\"name\", ctx_r1.model.name)(\"value\", option_r2.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", option_r2.label, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction DynamicBasicSelectComponent_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"disabled\", option_r1.disabled)(\"ngValue\", option_r1.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", option_r1.label, \" \");\n  }\n}\n\nconst _c1 = [\"componentViewContainer\"];\n\nfunction DynamicBasicFormControlContainerComponent_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"label\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"for\", ctx_r0.id)(\"innerHTML\", ctx_r0.model.label, i0.ɵɵsanitizeHtml)(\"ngClass\", i0.ɵɵpureFunction2(3, _c0, ctx_r0.getClass(\"element\", \"label\"), ctx_r0.getClass(\"grid\", \"label\")));\n  }\n}\n\nfunction DynamicBasicFormControlContainerComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction DynamicBasicFormControlContainerComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelement(1, \"span\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(2, _c0, ctx_r3.getClass(\"element\", \"hint\"), ctx_r3.getClass(\"grid\", \"hint\")));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r3.hint, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction DynamicBasicFormControlContainerComponent_ul_6_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const message_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(message_r7);\n  }\n}\n\nfunction DynamicBasicFormControlContainerComponent_ul_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 6);\n    i0.ɵɵtemplate(1, DynamicBasicFormControlContainerComponent_ul_6_li_1_Template, 2, 1, \"li\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(2, _c0, ctx_r4.getClass(\"element\", \"errors\"), ctx_r4.getClass(\"grid\", \"errors\")));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.errorMessages);\n  }\n}\n\nfunction DynamicBasicFormControlContainerComponent_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c2 = function (a0, a1, a2) {\n  return [a0, a1, a2];\n};\n\nconst _c3 = [\"*\"];\n\nfunction DynamicBasicFormArrayComponent_div_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction DynamicBasicFormArrayComponent_div_2_dynamic_basic_form_control_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"dynamic-basic-form-control\", 6);\n    i0.ɵɵlistener(\"blur\", function DynamicBasicFormArrayComponent_div_2_dynamic_basic_form_control_2_Template_dynamic_basic_form_control_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.onBlur($event);\n    })(\"change\", function DynamicBasicFormArrayComponent_div_2_dynamic_basic_form_control_2_Template_dynamic_basic_form_control_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.onChange($event);\n    })(\"focus\", function DynamicBasicFormArrayComponent_div_2_dynamic_basic_form_control_2_Template_dynamic_basic_form_control_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.onFocus($event);\n    })(\"bsEvent\", function DynamicBasicFormArrayComponent_div_2_dynamic_basic_form_control_2_Template_dynamic_basic_form_control_bsEvent_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.onCustomEvent($event, null, true);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _model_r6 = ctx.$implicit;\n    const ctx_r12 = i0.ɵɵnextContext();\n    const groupModel_r1 = ctx_r12.$implicit;\n    const idx_r2 = ctx_r12.index;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"context\", groupModel_r1)(\"group\", ctx_r4.array.at(idx_r2))(\"hidden\", _model_r6.hidden)(\"layout\", ctx_r4.formLayout)(\"model\", _model_r6)(\"templates\", ctx_r4.templates)(\"hostClass\", i0.ɵɵpureFunction2(7, _c0, ctx_r4.getClass(\"element\", \"children\"), ctx_r4.getClass(\"grid\", \"children\")));\n  }\n}\n\nfunction DynamicBasicFormArrayComponent_div_2_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction DynamicBasicFormArrayComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, DynamicBasicFormArrayComponent_div_2_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵtemplate(2, DynamicBasicFormArrayComponent_div_2_dynamic_basic_form_control_2_Template, 1, 10, \"dynamic-basic-form-control\", 5);\n    i0.ɵɵtemplate(3, DynamicBasicFormArrayComponent_div_2_ng_container_3_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const groupModel_r1 = ctx.$implicit;\n    const idx_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", idx_r2)(\"ngClass\", i0.ɵɵpureFunction2(7, _c0, ctx_r0.getClass(\"element\", \"group\"), ctx_r0.getClass(\"grid\", \"group\")));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.startTemplate == null ? null : ctx_r0.startTemplate.templateRef)(\"ngTemplateOutletContext\", groupModel_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", groupModel_r1.group);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.endTemplate == null ? null : ctx_r0.endTemplate.templateRef)(\"ngTemplateOutletContext\", groupModel_r1);\n  }\n}\n\nfunction DynamicBasicFormGroupComponent_legend_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"legend\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.model.legend, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction DynamicBasicFormGroupComponent_dynamic_basic_form_control_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"dynamic-basic-form-control\", 5);\n    i0.ɵɵlistener(\"blur\", function DynamicBasicFormGroupComponent_dynamic_basic_form_control_3_Template_dynamic_basic_form_control_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onBlur($event);\n    })(\"change\", function DynamicBasicFormGroupComponent_dynamic_basic_form_control_3_Template_dynamic_basic_form_control_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onChange($event);\n    })(\"focus\", function DynamicBasicFormGroupComponent_dynamic_basic_form_control_3_Template_dynamic_basic_form_control_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.onFocus($event);\n    })(\"bsEvent\", function DynamicBasicFormGroupComponent_dynamic_basic_form_control_3_Template_dynamic_basic_form_control_bsEvent_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onCustomEvent($event, null, true);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _model_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"group\", ctx_r1.control)(\"hidden\", _model_r2.hidden)(\"layout\", ctx_r1.formLayout)(\"model\", _model_r2)(\"templates\", ctx_r1.templates)(\"hostClass\", i0.ɵɵpureFunction2(6, _c0, ctx_r1.getClass(\"element\", \"children\"), ctx_r1.getClass(\"grid\", \"children\")));\n  }\n}\n\nfunction DynamicBasicFormComponent_dynamic_basic_form_control_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"dynamic-basic-form-control\", 1);\n    i0.ɵɵlistener(\"blur\", function DynamicBasicFormComponent_dynamic_basic_form_control_0_Template_dynamic_basic_form_control_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onBlur($event);\n    })(\"change\", function DynamicBasicFormComponent_dynamic_basic_form_control_0_Template_dynamic_basic_form_control_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onChange($event);\n    })(\"focus\", function DynamicBasicFormComponent_dynamic_basic_form_control_0_Template_dynamic_basic_form_control_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onFocus($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const controlModel_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"group\", ctx_r0.group)(\"hidden\", controlModel_r1.hidden)(\"layout\", ctx_r0.layout)(\"model\", controlModel_r1)(\"templates\", ctx_r0.templates);\n  }\n}\n\nclass DynamicBasicCheckboxComponent extends DynamicFormControlComponent {\n  constructor(layoutService, validationService) {\n    super(layoutService, validationService);\n    this.layoutService = layoutService;\n    this.validationService = validationService;\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n  }\n\n}\n\nDynamicBasicCheckboxComponent.ɵfac = function DynamicBasicCheckboxComponent_Factory(t) {\n  return new (t || DynamicBasicCheckboxComponent)(i0.ɵɵdirectiveInject(i1.DynamicFormLayoutService), i0.ɵɵdirectiveInject(i1.DynamicFormValidationService));\n};\n\nDynamicBasicCheckboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DynamicBasicCheckboxComponent,\n  selectors: [[\"dynamic-basic-checkbox\"]],\n  inputs: {\n    formLayout: \"formLayout\",\n    group: \"group\",\n    layout: \"layout\",\n    model: \"model\"\n  },\n  outputs: {\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 15,\n  consts: [[3, \"formGroup\", \"ngClass\"], [\"type\", \"checkbox\", 3, \"checked\", \"formControlName\", \"id\", \"indeterminate\", \"name\", \"required\", \"tabindex\", \"value\", \"blur\", \"change\", \"focus\"], [3, \"ngClass\", \"innerHTML\"]],\n  template: function DynamicBasicCheckboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"label\", 0)(1, \"input\", 1);\n      i0.ɵɵlistener(\"blur\", function DynamicBasicCheckboxComponent_Template_input_blur_1_listener($event) {\n        return ctx.onBlur($event);\n      })(\"change\", function DynamicBasicCheckboxComponent_Template_input_change_1_listener($event) {\n        return ctx.onChange($event);\n      })(\"focus\", function DynamicBasicCheckboxComponent_Template_input_focus_1_listener($event) {\n        return ctx.onFocus($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"span\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.group)(\"ngClass\", i0.ɵɵpureFunction2(12, _c0, ctx.getClass(\"element\", \"control\"), ctx.getClass(\"grid\", \"control\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"checked\", ctx.model.checked)(\"formControlName\", ctx.model.id)(\"id\", ctx.id)(\"indeterminate\", ctx.model.indeterminate)(\"name\", ctx.model.name)(\"required\", ctx.model.required)(\"tabindex\", ctx.model.tabIndex)(\"value\", ctx.model.value);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", ctx.getClass(\"element\", \"label\"))(\"innerHTML\", ctx.model.label, i0.ɵɵsanitizeHtml);\n    }\n  },\n  directives: [i2.NgControlStatusGroup, i2.FormGroupDirective, i3.NgClass, i2.CheckboxControlValueAccessor, i2.CheckboxRequiredValidator, i2.NgControlStatus, i2.FormControlName],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicBasicCheckboxComponent, [{\n    type: Component,\n    args: [{\n      selector: \"dynamic-basic-checkbox\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<label [formGroup]=\\\"group\\\" [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\">\\n\\n    <input type=\\\"checkbox\\\"\\n           [checked]=\\\"model.checked\\\"\\n           [formControlName]=\\\"model.id\\\"\\n           [id]=\\\"id\\\"\\n           [indeterminate]=\\\"model.indeterminate\\\"\\n           [name]=\\\"model.name\\\"\\n           [required]=\\\"model.required\\\"\\n           [tabindex]=\\\"model.tabIndex\\\"\\n           [value]=\\\"model.value\\\"\\n           (blur)=\\\"onBlur($event)\\\"\\n           (change)=\\\"onChange($event)\\\"\\n           (focus)=\\\"onFocus($event)\\\"/><span [ngClass]=\\\"getClass('element', 'label')\\\"\\n                                            [innerHTML]=\\\"model.label\\\"></span></label>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i1.DynamicFormLayoutService\n    }, {\n      type: i1.DynamicFormValidationService\n    }];\n  }, {\n    formLayout: [{\n      type: Input\n    }],\n    group: [{\n      type: Input\n    }],\n    layout: [{\n      type: Input\n    }],\n    model: [{\n      type: Input\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }]\n  });\n})();\n\nclass DynamicBasicInputComponent extends DynamicFormControlComponent {\n  constructor(layoutService, validationService) {\n    super(layoutService, validationService);\n    this.layoutService = layoutService;\n    this.validationService = validationService;\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n  }\n\n}\n\nDynamicBasicInputComponent.ɵfac = function DynamicBasicInputComponent_Factory(t) {\n  return new (t || DynamicBasicInputComponent)(i0.ɵɵdirectiveInject(i1.DynamicFormLayoutService), i0.ɵɵdirectiveInject(i1.DynamicFormValidationService));\n};\n\nDynamicBasicInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DynamicBasicInputComponent,\n  selectors: [[\"dynamic-basic-input\"]],\n  inputs: {\n    formLayout: \"formLayout\",\n    group: \"group\",\n    layout: \"layout\",\n    model: \"model\"\n  },\n  outputs: {\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 4,\n  consts: [[3, \"formGroup\"], [3, \"autocomplete\", \"autofocus\", \"dynamicList\", \"formControlName\", \"id\", \"maxlength\", \"minlength\", \"name\", \"ngClass\", \"pattern\", \"placeholder\", \"readonly\", \"required\", \"spellcheck\", \"tabindex\", \"type\", \"blur\", \"change\", \"focus\", 4, \"ngIf\", \"ngIfElse\"], [\"maskedInput\", \"\"], [3, \"id\", 4, \"ngIf\"], [3, \"autocomplete\", \"autofocus\", \"dynamicList\", \"formControlName\", \"id\", \"maxlength\", \"minlength\", \"name\", \"ngClass\", \"pattern\", \"placeholder\", \"readonly\", \"required\", \"spellcheck\", \"tabindex\", \"type\", \"blur\", \"change\", \"focus\"], [1, \"form-control\", 3, \"autocomplete\", \"autofocus\", \"dynamicList\", \"formControlName\", \"id\", \"maxlength\", \"minlength\", \"name\", \"ngClass\", \"pattern\", \"placeholder\", \"readonly\", \"required\", \"spellcheck\", \"tabindex\", \"mask\", \"specialCharacters\", \"patterns\", \"prefix\", \"suffix\", \"thousandSeparator\", \"decimalMarker\", \"dropSpecialCharacters\", \"hiddenInput\", \"showMaskTyped\", \"placeHolderCharacter\", \"shownMaskExpression\", \"showTemplate\", \"clearIfNotMatch\", \"validation\", \"separatorLimit\", \"allowNegativeNumbers\", \"leadZeroDateTime\", \"type\", \"blur\", \"change\", \"focus\"], [3, \"id\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function DynamicBasicInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, DynamicBasicInputComponent_input_1_Template, 1, 24, \"input\", 1);\n      i0.ɵɵtemplate(2, DynamicBasicInputComponent_ng_template_2_Template, 1, 42, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(4, DynamicBasicInputComponent_datalist_4_Template, 3, 4, \"datalist\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(3);\n\n      i0.ɵɵproperty(\"formGroup\", ctx.group);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.model.inputType === \"file\")(\"ngIfElse\", _r1);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.model.hasList);\n    }\n  },\n  directives: [i2.NgControlStatusGroup, i2.FormGroupDirective, i3.NgIf, i2.DefaultValueAccessor, i1.DynamicListDirective, i2.NgControlStatus, i2.FormControlName, i2.MaxLengthValidator, i2.MinLengthValidator, i3.NgClass, i2.PatternValidator, i2.RequiredValidator, i4.MaskDirective, i3.NgForOf, i2.NgSelectOption, i2.ɵNgSelectMultipleOption],\n  pipes: [i3.AsyncPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicBasicInputComponent, [{\n    type: Component,\n    args: [{\n      selector: \"dynamic-basic-input\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<div [formGroup]=\\\"group\\\">\\n\\n    <input *ngIf=\\\"model.inputType === 'file'; else maskedInput\\\"\\n           [attr.accept]=\\\"model.accept\\\"\\n           [attr.max]=\\\"model.max\\\"\\n           [attr.min]=\\\"model.min\\\"\\n           [attr.multiple]=\\\"model.multiple\\\"\\n           [attr.step]=\\\"model.step\\\"\\n           [autocomplete]=\\\"model.autoComplete\\\"\\n           [autofocus]=\\\"model.autoFocus\\\"\\n           [dynamicList]=\\\"model.listId\\\"\\n           [formControlName]=\\\"model.id\\\"\\n           [id]=\\\"id\\\"\\n           [maxlength]=\\\"model.maxLength\\\"\\n           [minlength]=\\\"model.minLength\\\"\\n           [name]=\\\"model.name\\\"\\n           [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n           [pattern]=\\\"model.pattern\\\"\\n           [placeholder]=\\\"model.placeholder\\\"\\n           [readonly]=\\\"model.readOnly\\\"\\n           [required]=\\\"model.required\\\"\\n           [spellcheck]=\\\"model.spellCheck\\\"\\n           [tabindex]=\\\"model.tabIndex\\\"\\n           [type]=\\\"model.inputType\\\"\\n           (blur)=\\\"onBlur($event)\\\"\\n           (change)=\\\"onChange($event)\\\"\\n           (focus)=\\\"onFocus($event)\\\"/>\\n\\n    <ng-template #maskedInput>\\n        <input class=\\\"form-control\\\"\\n               [attr.accept]=\\\"model.accept\\\"\\n               [attr.max]=\\\"model.max\\\"\\n               [attr.min]=\\\"model.min\\\"\\n               [attr.multiple]=\\\"model.multiple\\\"\\n               [attr.step]=\\\"model.step\\\"\\n               [autocomplete]=\\\"model.autoComplete\\\"\\n               [autofocus]=\\\"model.autoFocus\\\"\\n               [dynamicList]=\\\"model.listId\\\"\\n               [formControlName]=\\\"model.id\\\"\\n               [id]=\\\"id\\\"\\n               [maxlength]=\\\"model.maxLength\\\"\\n               [minlength]=\\\"model.minLength\\\"\\n               [name]=\\\"model.name\\\"\\n               [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n               [pattern]=\\\"model.pattern\\\"\\n               [placeholder]=\\\"model.placeholder\\\"\\n               [readonly]=\\\"model.readOnly\\\"\\n               [required]=\\\"model.required\\\"\\n               [spellcheck]=\\\"model.spellCheck\\\"\\n               [tabindex]=\\\"model.tabIndex\\\"\\n               [mask]=\\\"model.mask\\\"\\n               [specialCharacters]=\\\"model.maskConfig?.specialCharacters\\\"\\n               [patterns]=\\\"model.maskConfig?.patterns\\\"\\n               [prefix]=\\\"model.maskConfig?.prefix\\\"\\n               [suffix]=\\\"model.maskConfig?.suffix\\\"\\n               [thousandSeparator]=\\\"model.maskConfig?.thousandSeparator\\\"\\n               [decimalMarker]=\\\"model.maskConfig?.decimalMarker\\\"\\n               [dropSpecialCharacters]=\\\"model.maskConfig?.dropSpecialCharacters\\\"\\n               [hiddenInput]=\\\"model.maskConfig?.hiddenInput\\\"\\n               [showMaskTyped]=\\\"model.maskConfig?.showMaskTyped\\\"\\n               [placeHolderCharacter]=\\\"model.maskConfig?.placeHolderCharacter\\\"\\n               [shownMaskExpression]=\\\"model.maskConfig?.shownMaskExpression\\\"\\n               [showTemplate]=\\\"model.maskConfig?.showTemplate\\\"\\n               [clearIfNotMatch]=\\\"model.maskConfig.clearIfNotMatch\\\"\\n               [validation]=\\\"model.maskConfig.validation\\\"\\n               [separatorLimit]=\\\"model.maskConfig.separatorLimit\\\"\\n               [allowNegativeNumbers]=\\\"model.maskConfig.allowNegativeNumbers\\\"\\n               [leadZeroDateTime]=\\\"model.maskConfig.leadZeroDateTime\\\"\\n               [type]=\\\"model.inputType\\\"\\n               (blur)=\\\"onBlur($event)\\\"\\n               (change)=\\\"onChange($event)\\\"\\n               (focus)=\\\"onFocus($event)\\\"/>\\n    </ng-template>\\n\\n    <datalist *ngIf=\\\"model.hasList\\\" [id]=\\\"model.listId\\\">\\n        <option *ngFor=\\\"let option of model.list$ | async\\\" [value]=\\\"option\\\">\\n    </datalist>\\n\\n</div>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i1.DynamicFormLayoutService\n    }, {\n      type: i1.DynamicFormValidationService\n    }];\n  }, {\n    formLayout: [{\n      type: Input\n    }],\n    group: [{\n      type: Input\n    }],\n    layout: [{\n      type: Input\n    }],\n    model: [{\n      type: Input\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }]\n  });\n})();\n\nclass DynamicBasicRadioGroupComponent extends DynamicFormControlComponent {\n  constructor(layoutService, validationService) {\n    super(layoutService, validationService);\n    this.layoutService = layoutService;\n    this.validationService = validationService;\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n  }\n\n}\n\nDynamicBasicRadioGroupComponent.ɵfac = function DynamicBasicRadioGroupComponent_Factory(t) {\n  return new (t || DynamicBasicRadioGroupComponent)(i0.ɵɵdirectiveInject(i1.DynamicFormLayoutService), i0.ɵɵdirectiveInject(i1.DynamicFormValidationService));\n};\n\nDynamicBasicRadioGroupComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DynamicBasicRadioGroupComponent,\n  selectors: [[\"dynamic-basic-radio-group\"]],\n  inputs: {\n    formLayout: \"formLayout\",\n    group: \"group\",\n    layout: \"layout\",\n    model: \"model\"\n  },\n  outputs: {\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 12,\n  consts: [[\"role\", \"radiogroup\", 3, \"formGroup\", \"id\", \"name\", \"ngClass\", \"tabindex\", \"change\"], [3, \"innerHTML\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"innerHTML\"], [3, \"ngClass\"], [\"type\", \"radio\", 3, \"formControlName\", \"name\", \"value\", \"blur\", \"focus\"]],\n  template: function DynamicBasicRadioGroupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"fieldset\", 0);\n      i0.ɵɵlistener(\"change\", function DynamicBasicRadioGroupComponent_Template_fieldset_change_0_listener($event) {\n        return ctx.onChange($event);\n      });\n      i0.ɵɵtemplate(1, DynamicBasicRadioGroupComponent_legend_1_Template, 1, 1, \"legend\", 1);\n      i0.ɵɵtemplate(2, DynamicBasicRadioGroupComponent_label_2_Template, 3, 5, \"label\", 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.group)(\"id\", ctx.id)(\"name\", ctx.model.name)(\"ngClass\", i0.ɵɵpureFunction2(9, _c0, ctx.getClass(\"element\", \"control\"), ctx.getClass(\"grid\", \"control\")))(\"tabindex\", ctx.model.tabIndex);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.model.legend);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(3, 7, ctx.model.options$));\n    }\n  },\n  directives: [i2.NgControlStatusGroup, i2.FormGroupDirective, i3.NgClass, i3.NgIf, i3.NgForOf, i2.RadioControlValueAccessor, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName],\n  pipes: [i3.AsyncPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicBasicRadioGroupComponent, [{\n    type: Component,\n    args: [{\n      selector: \"dynamic-basic-radio-group\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<fieldset role=\\\"radiogroup\\\"\\n          [formGroup]=\\\"group\\\"\\n          [id]=\\\"id\\\"\\n          [name]=\\\"model.name\\\"\\n          [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n          [tabindex]=\\\"model.tabIndex\\\"\\n          (change)=\\\"onChange($event)\\\">\\n\\n    <legend *ngIf=\\\"model.legend\\\" [innerHTML]=\\\"model.legend\\\"></legend>\\n\\n    <label *ngFor=\\\"let option of model.options$ | async\\\" [ngClass]=\\\"getClass('element', 'option')\\\">\\n\\n        <input type=\\\"radio\\\"\\n               [formControlName]=\\\"model.id\\\"\\n               [name]=\\\"model.name\\\"\\n               [value]=\\\"option.value\\\"\\n               (blur)=\\\"onBlur($event)\\\"\\n               (focus)=\\\"onFocus($event)\\\"/><span [innerHTML]=\\\"option.label\\\"></span></label>\\n</fieldset>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i1.DynamicFormLayoutService\n    }, {\n      type: i1.DynamicFormValidationService\n    }];\n  }, {\n    formLayout: [{\n      type: Input\n    }],\n    group: [{\n      type: Input\n    }],\n    layout: [{\n      type: Input\n    }],\n    model: [{\n      type: Input\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }]\n  });\n})();\n\nclass DynamicBasicSelectComponent extends DynamicFormControlComponent {\n  constructor(layoutService, validationService) {\n    super(layoutService, validationService);\n    this.layoutService = layoutService;\n    this.validationService = validationService;\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n  }\n\n}\n\nDynamicBasicSelectComponent.ɵfac = function DynamicBasicSelectComponent_Factory(t) {\n  return new (t || DynamicBasicSelectComponent)(i0.ɵɵdirectiveInject(i1.DynamicFormLayoutService), i0.ɵɵdirectiveInject(i1.DynamicFormValidationService));\n};\n\nDynamicBasicSelectComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DynamicBasicSelectComponent,\n  selectors: [[\"dynamic-basic-select\"]],\n  inputs: {\n    formLayout: \"formLayout\",\n    group: \"group\",\n    layout: \"layout\",\n    model: \"model\"\n  },\n  outputs: {\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 14,\n  consts: [[3, \"formGroup\"], [3, \"compareWith\", \"formControlName\", \"id\", \"name\", \"ngClass\", \"required\", \"tabindex\", \"blur\", \"change\", \"focus\"], [3, \"disabled\", \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [3, \"disabled\", \"ngValue\"]],\n  template: function DynamicBasicSelectComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainerStart(0, 0);\n      i0.ɵɵelementStart(1, \"select\", 1);\n      i0.ɵɵlistener(\"blur\", function DynamicBasicSelectComponent_Template_select_blur_1_listener($event) {\n        return ctx.onBlur($event);\n      })(\"change\", function DynamicBasicSelectComponent_Template_select_change_1_listener($event) {\n        return ctx.onChange($event);\n      })(\"focus\", function DynamicBasicSelectComponent_Template_select_focus_1_listener($event) {\n        return ctx.onFocus($event);\n      });\n      i0.ɵɵtemplate(2, DynamicBasicSelectComponent_option_2_Template, 2, 3, \"option\", 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementContainerEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.group);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"compareWith\", ctx.model.compareWithFn)(\"formControlName\", ctx.model.id)(\"id\", ctx.id)(\"name\", ctx.model.name)(\"ngClass\", i0.ɵɵpureFunction2(11, _c0, ctx.getClass(\"element\", \"control\"), ctx.getClass(\"grid\", \"control\")))(\"required\", ctx.model.required)(\"tabindex\", ctx.model.tabIndex);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(3, 9, ctx.model.options$));\n    }\n  },\n  directives: [i2.NgControlStatusGroup, i2.FormGroupDirective, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.FormControlName, i3.NgClass, i2.RequiredValidator, i3.NgForOf, i2.NgSelectOption, i2.ɵNgSelectMultipleOption],\n  pipes: [i3.AsyncPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicBasicSelectComponent, [{\n    type: Component,\n    args: [{\n      selector: \"dynamic-basic-select\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <select [compareWith]=\\\"model.compareWithFn\\\"\\n            [formControlName]=\\\"model.id\\\"\\n            [id]=\\\"id\\\"\\n            [name]=\\\"model.name\\\"\\n            [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n            [required]=\\\"model.required\\\"\\n            [tabindex]=\\\"model.tabIndex\\\"\\n            (blur)=\\\"onBlur($event)\\\"\\n            (change)=\\\"onChange($event)\\\"\\n            (focus)=\\\"onFocus($event)\\\">\\n\\n        <option *ngFor=\\\"let option of model.options$ | async\\\"\\n                [disabled]=\\\"option.disabled\\\"\\n                [ngValue]=\\\"option.value\\\">{{ option.label }}\\n        </option>\\n\\n    </select>\\n\\n</ng-container>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i1.DynamicFormLayoutService\n    }, {\n      type: i1.DynamicFormValidationService\n    }];\n  }, {\n    formLayout: [{\n      type: Input\n    }],\n    group: [{\n      type: Input\n    }],\n    layout: [{\n      type: Input\n    }],\n    model: [{\n      type: Input\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }]\n  });\n})();\n\nclass DynamicBasicTextAreaComponent extends DynamicFormControlComponent {\n  constructor(layoutService, validationService) {\n    super(layoutService, validationService);\n    this.layoutService = layoutService;\n    this.validationService = validationService;\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n  }\n\n}\n\nDynamicBasicTextAreaComponent.ɵfac = function DynamicBasicTextAreaComponent_Factory(t) {\n  return new (t || DynamicBasicTextAreaComponent)(i0.ɵɵdirectiveInject(i1.DynamicFormLayoutService), i0.ɵɵdirectiveInject(i1.DynamicFormValidationService));\n};\n\nDynamicBasicTextAreaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DynamicBasicTextAreaComponent,\n  selectors: [[\"dynamic-basic-textarea\"]],\n  inputs: {\n    formLayout: \"formLayout\",\n    group: \"group\",\n    layout: \"layout\",\n    model: \"model\"\n  },\n  outputs: {\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 2,\n  vars: 18,\n  consts: [[3, \"formGroup\"], [3, \"cols\", \"formControlName\", \"id\", \"maxlength\", \"minlength\", \"name\", \"ngClass\", \"placeholder\", \"readonly\", \"required\", \"rows\", \"spellcheck\", \"tabindex\", \"wrap\", \"blur\", \"change\", \"focus\"]],\n  template: function DynamicBasicTextAreaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainerStart(0, 0);\n      i0.ɵɵelementStart(1, \"textarea\", 1);\n      i0.ɵɵlistener(\"blur\", function DynamicBasicTextAreaComponent_Template_textarea_blur_1_listener($event) {\n        return ctx.onBlur($event);\n      })(\"change\", function DynamicBasicTextAreaComponent_Template_textarea_change_1_listener($event) {\n        return ctx.onChange($event);\n      })(\"focus\", function DynamicBasicTextAreaComponent_Template_textarea_focus_1_listener($event) {\n        return ctx.onFocus($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementContainerEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.group);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"cols\", ctx.model.cols)(\"formControlName\", ctx.model.id)(\"id\", ctx.id)(\"maxlength\", ctx.model.maxLength)(\"minlength\", ctx.model.minLength)(\"name\", ctx.model.name)(\"ngClass\", i0.ɵɵpureFunction2(15, _c0, ctx.getClass(\"element\", \"control\"), ctx.getClass(\"grid\", \"control\")))(\"placeholder\", ctx.model.placeholder)(\"readonly\", ctx.model.readOnly)(\"required\", ctx.model.required)(\"rows\", ctx.model.rows)(\"spellcheck\", ctx.model.spellCheck)(\"tabindex\", ctx.model.tabIndex)(\"wrap\", ctx.model.wrap);\n    }\n  },\n  directives: [i2.NgControlStatusGroup, i2.FormGroupDirective, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i2.MaxLengthValidator, i2.MinLengthValidator, i3.NgClass, i2.RequiredValidator],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicBasicTextAreaComponent, [{\n    type: Component,\n    args: [{\n      selector: \"dynamic-basic-textarea\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <textarea [cols]=\\\"model.cols\\\"\\n              [formControlName]=\\\"model.id\\\"\\n              [id]=\\\"id\\\"\\n              [maxlength]=\\\"model.maxLength\\\"\\n              [minlength]=\\\"model.minLength\\\"\\n              [name]=\\\"model.name\\\"\\n              [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n              [placeholder]=\\\"model.placeholder\\\"\\n              [readonly]=\\\"model.readOnly\\\"\\n              [required]=\\\"model.required\\\"\\n              [rows]=\\\"model.rows\\\"\\n              [spellcheck]=\\\"model.spellCheck\\\"\\n              [tabindex]=\\\"model.tabIndex\\\"\\n              [wrap]=\\\"model.wrap\\\"\\n              (blur)=\\\"onBlur($event)\\\"\\n              (change)=\\\"onChange($event)\\\"\\n              (focus)=\\\"onFocus($event)\\\"></textarea>\\n\\n</ng-container>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i1.DynamicFormLayoutService\n    }, {\n      type: i1.DynamicFormValidationService\n    }];\n  }, {\n    formLayout: [{\n      type: Input\n    }],\n    group: [{\n      type: Input\n    }],\n    layout: [{\n      type: Input\n    }],\n    model: [{\n      type: Input\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }]\n  });\n})();\n\nclass DynamicBasicFormControlContainerComponent extends DynamicFormControlContainerComponent {\n  constructor(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService) {\n    super(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService);\n    this.changeDetectorRef = changeDetectorRef;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.layoutService = layoutService;\n    this.validationService = validationService;\n    this.componentService = componentService;\n    this.relationService = relationService;\n    this.context = null;\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n  }\n\n  get componentType() {\n    var _a;\n\n    return (_a = this.componentService.getCustomComponentType(this.model)) !== null && _a !== void 0 ? _a : basicUIFormControlMapFn(this.model);\n  }\n\n}\n\nDynamicBasicFormControlContainerComponent.ɵfac = function DynamicBasicFormControlContainerComponent_Factory(t) {\n  return new (t || DynamicBasicFormControlContainerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i1.DynamicFormLayoutService), i0.ɵɵdirectiveInject(i1.DynamicFormValidationService), i0.ɵɵdirectiveInject(i1.DynamicFormComponentService), i0.ɵɵdirectiveInject(i1.DynamicFormRelationService));\n};\n\nDynamicBasicFormControlContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DynamicBasicFormControlContainerComponent,\n  selectors: [[\"dynamic-basic-form-control\"]],\n  contentQueries: function DynamicBasicFormControlContainerComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, DynamicTemplateDirective, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentTemplateList = _t);\n    }\n  },\n  viewQuery: function DynamicBasicFormControlContainerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 7, ViewContainerRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.componentViewContainerRef = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function DynamicBasicFormControlContainerComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.klass);\n    }\n  },\n  inputs: {\n    context: \"context\",\n    group: \"group\",\n    hostClass: \"hostClass\",\n    inputTemplateList: [\"templates\", \"inputTemplateList\"],\n    layout: \"layout\",\n    model: \"model\"\n  },\n  outputs: {\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c3,\n  decls: 9,\n  vars: 13,\n  consts: [[3, \"formGroup\", \"ngClass\"], [3, \"for\", \"innerHTML\", \"ngClass\", 4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"componentViewContainer\", \"\"], [3, \"ngClass\", 4, \"ngIf\"], [3, \"for\", \"innerHTML\", \"ngClass\"], [3, \"ngClass\"], [3, \"innerHTML\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function DynamicBasicFormControlContainerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, DynamicBasicFormControlContainerComponent_label_1_Template, 1, 6, \"label\", 1);\n      i0.ɵɵtemplate(2, DynamicBasicFormControlContainerComponent_ng_container_2_Template, 1, 0, \"ng-container\", 2);\n      i0.ɵɵelementContainer(3, null, 3);\n      i0.ɵɵtemplate(5, DynamicBasicFormControlContainerComponent_div_5_Template, 2, 5, \"div\", 4);\n      i0.ɵɵtemplate(6, DynamicBasicFormControlContainerComponent_ul_6_Template, 2, 5, \"ul\", 4);\n      i0.ɵɵtemplate(7, DynamicBasicFormControlContainerComponent_ng_container_7_Template, 1, 0, \"ng-container\", 2);\n      i0.ɵɵprojection(8);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.group)(\"ngClass\", i0.ɵɵpureFunction3(9, _c2, \"ng-dynamic-forms-\" + ctx.model.type.toLowerCase(), ctx.getClass(\"element\", \"container\"), ctx.getClass(\"grid\", \"container\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isCheckbox && ctx.hasLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.startTemplate == null ? null : ctx.startTemplate.templateRef)(\"ngTemplateOutletContext\", ctx.model);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasHint);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showErrorMessages);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.endTemplate == null ? null : ctx.endTemplate.templateRef)(\"ngTemplateOutletContext\", ctx.model);\n    }\n  },\n  directives: [i2.NgControlStatusGroup, i2.FormGroupDirective, i3.NgClass, i3.NgIf, i3.NgTemplateOutlet, i3.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicBasicFormControlContainerComponent, [{\n    type: Component,\n    args: [{\n      selector: \"dynamic-basic-form-control\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<div [formGroup]=\\\"group\\\" [ngClass]=\\\"['ng-dynamic-forms-'+model.type.toLowerCase(), getClass('element', 'container'), getClass('grid', 'container')]\\\">\\n\\n    <label *ngIf=\\\"!isCheckbox && hasLabel\\\"\\n           [for]=\\\"id\\\"\\n           [innerHTML]=\\\"model.label\\\"\\n           [ngClass]=\\\"[getClass('element', 'label'), getClass('grid', 'label')]\\\"></label>\\n\\n    <ng-container *ngTemplateOutlet=\\\"startTemplate?.templateRef; context: model\\\"></ng-container>\\n\\n    <ng-container #componentViewContainer></ng-container>\\n\\n    <div *ngIf=\\\"hasHint\\\" [ngClass]=\\\"[getClass('element', 'hint'), getClass('grid', 'hint')]\\\">\\n        <span [innerHTML]=\\\"hint\\\"></span>\\n    </div>\\n\\n    <ul *ngIf=\\\"showErrorMessages\\\" [ngClass]=\\\"[getClass('element', 'errors'), getClass('grid', 'errors')]\\\">\\n        <li *ngFor=\\\"let message of errorMessages\\\">{{ message }}</li>\\n    </ul>\\n\\n    <ng-container *ngTemplateOutlet=\\\"endTemplate?.templateRef; context: model\\\"></ng-container>\\n\\n    <ng-content></ng-content>\\n\\n</div>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i1.DynamicFormLayoutService\n    }, {\n      type: i1.DynamicFormValidationService\n    }, {\n      type: i1.DynamicFormComponentService\n    }, {\n      type: i1.DynamicFormRelationService\n    }];\n  }, {\n    contentTemplateList: [{\n      type: ContentChildren,\n      args: [DynamicTemplateDirective]\n    }],\n    klass: [{\n      type: HostBinding,\n      args: [\"class\"]\n    }],\n    context: [{\n      type: Input\n    }],\n    group: [{\n      type: Input\n    }],\n    hostClass: [{\n      type: Input\n    }],\n    inputTemplateList: [{\n      type: Input,\n      args: [\"templates\"]\n    }],\n    layout: [{\n      type: Input\n    }],\n    model: [{\n      type: Input\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    componentViewContainerRef: [{\n      type: ViewChild,\n      args: [\"componentViewContainer\", {\n        read: ViewContainerRef,\n        static: true\n      }]\n    }]\n  });\n})();\n\nfunction basicUIFormControlMapFn(model) {\n  switch (model.type) {\n    case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n      return DynamicBasicFormArrayComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\n      return DynamicBasicCheckboxComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n      return DynamicBasicFormGroupComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n      return DynamicBasicFormGroupComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\n      return DynamicBasicInputComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\n      return DynamicBasicRadioGroupComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\n      return DynamicBasicSelectComponent;\n\n    case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\n      return DynamicBasicTextAreaComponent;\n\n    default:\n      return null;\n  }\n}\n\nclass DynamicBasicFormArrayComponent extends DynamicFormArrayComponent {\n  constructor(layoutService, validationService) {\n    super(layoutService, validationService);\n    this.layoutService = layoutService;\n    this.validationService = validationService;\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.customEvent = new EventEmitter();\n    this.focus = new EventEmitter();\n  }\n\n}\n\nDynamicBasicFormArrayComponent.ɵfac = function DynamicBasicFormArrayComponent_Factory(t) {\n  return new (t || DynamicBasicFormArrayComponent)(i0.ɵɵdirectiveInject(i1.DynamicFormLayoutService), i0.ɵɵdirectiveInject(i1.DynamicFormValidationService));\n};\n\nDynamicBasicFormArrayComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DynamicBasicFormArrayComponent,\n  selectors: [[\"dynamic-basic-form-array\"]],\n  viewQuery: function DynamicBasicFormArrayComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(DynamicBasicFormControlContainerComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.components = _t);\n    }\n  },\n  inputs: {\n    formLayout: \"formLayout\",\n    group: \"group\",\n    layout: \"layout\",\n    model: \"model\",\n    templates: \"templates\"\n  },\n  outputs: {\n    blur: \"blur\",\n    change: \"change\",\n    customEvent: \"customEvent\",\n    focus: \"focus\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 5,\n  consts: [[3, \"formGroup\"], [3, \"formArrayName\", \"id\", \"ngClass\"], [\"role\", \"group\", 3, \"formGroupName\", \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"group\", 3, \"formGroupName\", \"ngClass\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"context\", \"group\", \"hidden\", \"layout\", \"model\", \"templates\", \"hostClass\", \"blur\", \"change\", \"focus\", \"bsEvent\", 4, \"ngFor\", \"ngForOf\"], [3, \"context\", \"group\", \"hidden\", \"layout\", \"model\", \"templates\", \"hostClass\", \"blur\", \"change\", \"focus\", \"bsEvent\"]],\n  template: function DynamicBasicFormArrayComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainerStart(0, 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵtemplate(2, DynamicBasicFormArrayComponent_div_2_Template, 4, 10, \"div\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementContainerEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.group);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formArrayName\", ctx.model.id)(\"id\", ctx.id)(\"ngClass\", ctx.getClass(\"element\", \"control\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.model.groups);\n    }\n  },\n  directives: [DynamicBasicFormControlContainerComponent, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormArrayName, i3.NgClass, i3.NgForOf, i2.FormGroupName, i3.NgTemplateOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicBasicFormArrayComponent, [{\n    type: Component,\n    args: [{\n      selector: \"dynamic-basic-form-array\",\n      template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <div [formArrayName]=\\\"model.id\\\" [id]=\\\"id\\\" [ngClass]=\\\"getClass('element', 'control')\\\">\\n\\n        <div *ngFor=\\\"let groupModel of model.groups; let idx = index\\\" role=\\\"group\\\"\\n             [formGroupName]=\\\"idx\\\" [ngClass]=\\\"[getClass('element', 'group'), getClass('grid', 'group')]\\\">\\n\\n            <ng-container *ngTemplateOutlet=\\\"startTemplate?.templateRef; context: groupModel\\\"></ng-container>\\n\\n            <dynamic-basic-form-control *ngFor=\\\"let _model of groupModel.group\\\"\\n                                        [context]=\\\"groupModel\\\"\\n                                        [group]=\\\"array.at(idx)\\\"\\n                                        [hidden]=\\\"_model.hidden\\\"\\n                                        [layout]=\\\"formLayout\\\"\\n                                        [model]=\\\"_model\\\"\\n                                        [templates]=\\\"templates\\\"\\n                                        [hostClass]=\\\"[getClass('element','children'), getClass('grid','children')]\\\"\\n                                        (blur)=\\\"onBlur($event)\\\"\\n                                        (change)=\\\"onChange($event)\\\"\\n                                        (focus)=\\\"onFocus($event)\\\"\\n                                        (bsEvent)=\\\"onCustomEvent($event, null, true)\\\"></dynamic-basic-form-control>\\n\\n            <ng-container *ngTemplateOutlet=\\\"endTemplate?.templateRef; context: groupModel\\\"></ng-container>\\n\\n        </div>\\n\\n    </div>\\n\\n</ng-container>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i1.DynamicFormLayoutService\n    }, {\n      type: i1.DynamicFormValidationService\n    }];\n  }, {\n    formLayout: [{\n      type: Input\n    }],\n    group: [{\n      type: Input\n    }],\n    layout: [{\n      type: Input\n    }],\n    model: [{\n      type: Input\n    }],\n    templates: [{\n      type: Input\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    customEvent: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    components: [{\n      type: ViewChildren,\n      args: [forwardRef(() => DynamicBasicFormControlContainerComponent)]\n    }]\n  });\n})();\n\nclass DynamicBasicFormGroupComponent extends DynamicFormGroupComponent {\n  constructor(layoutService, validationService) {\n    super(layoutService, validationService);\n    this.layoutService = layoutService;\n    this.validationService = validationService;\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.customEvent = new EventEmitter();\n    this.focus = new EventEmitter();\n  }\n\n}\n\nDynamicBasicFormGroupComponent.ɵfac = function DynamicBasicFormGroupComponent_Factory(t) {\n  return new (t || DynamicBasicFormGroupComponent)(i0.ɵɵdirectiveInject(i1.DynamicFormLayoutService), i0.ɵɵdirectiveInject(i1.DynamicFormValidationService));\n};\n\nDynamicBasicFormGroupComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DynamicBasicFormGroupComponent,\n  selectors: [[\"dynamic-basic-form-group\"]],\n  viewQuery: function DynamicBasicFormGroupComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(DynamicFormControlContainerComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.components = _t);\n    }\n  },\n  inputs: {\n    formLayout: \"formLayout\",\n    group: \"group\",\n    layout: \"layout\",\n    model: \"model\",\n    templates: \"templates\"\n  },\n  outputs: {\n    blur: \"blur\",\n    change: \"change\",\n    customEvent: \"customEvent\",\n    focus: \"focus\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 7,\n  consts: [[3, \"formGroup\"], [3, \"formGroupName\", \"id\", \"name\", \"ngClass\"], [3, \"innerHTML\", 4, \"ngIf\"], [3, \"group\", \"hidden\", \"layout\", \"model\", \"templates\", \"hostClass\", \"blur\", \"change\", \"focus\", \"bsEvent\", 4, \"ngFor\", \"ngForOf\"], [3, \"innerHTML\"], [3, \"group\", \"hidden\", \"layout\", \"model\", \"templates\", \"hostClass\", \"blur\", \"change\", \"focus\", \"bsEvent\"]],\n  template: function DynamicBasicFormGroupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainerStart(0, 0);\n      i0.ɵɵelementStart(1, \"fieldset\", 1);\n      i0.ɵɵtemplate(2, DynamicBasicFormGroupComponent_legend_2_Template, 1, 1, \"legend\", 2);\n      i0.ɵɵtemplate(3, DynamicBasicFormGroupComponent_dynamic_basic_form_control_3_Template, 1, 9, \"dynamic-basic-form-control\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementContainerEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.group);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroupName\", ctx.model.id)(\"id\", ctx.id)(\"name\", ctx.model.name)(\"ngClass\", ctx.getClass(\"element\", \"control\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.model.legend);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.model.group);\n    }\n  },\n  directives: [DynamicBasicFormControlContainerComponent, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormGroupName, i3.NgClass, i3.NgIf, i3.NgForOf],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicBasicFormGroupComponent, [{\n    type: Component,\n    args: [{\n      selector: \"dynamic-basic-form-group\",\n      template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <fieldset [formGroupName]=\\\"model.id\\\"\\n              [id]=\\\"id\\\"\\n              [name]=\\\"model.name\\\"\\n              [ngClass]=\\\"getClass('element', 'control')\\\">\\n\\n        <legend *ngIf=\\\"model.legend\\\" [innerHTML]=\\\"model.legend\\\"></legend>\\n\\n        <dynamic-basic-form-control *ngFor=\\\"let _model of model.group\\\"\\n                                    [group]=\\\"control\\\"\\n                                    [hidden]=\\\"_model.hidden\\\"\\n                                    [layout]=\\\"formLayout\\\"\\n                                    [model]=\\\"_model\\\"\\n                                    [templates]=\\\"templates\\\"\\n                                    [hostClass]=\\\"[getClass('element','children'), getClass('grid','children')]\\\"\\n                                    (blur)=\\\"onBlur($event)\\\"\\n                                    (change)=\\\"onChange($event)\\\"\\n                                    (focus)=\\\"onFocus($event)\\\"\\n                                    (bsEvent)=\\\"onCustomEvent($event, null, true)\\\"></dynamic-basic-form-control>\\n    </fieldset>\\n\\n</ng-container>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i1.DynamicFormLayoutService\n    }, {\n      type: i1.DynamicFormValidationService\n    }];\n  }, {\n    formLayout: [{\n      type: Input\n    }],\n    group: [{\n      type: Input\n    }],\n    layout: [{\n      type: Input\n    }],\n    model: [{\n      type: Input\n    }],\n    templates: [{\n      type: Input\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    customEvent: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    components: [{\n      type: ViewChildren,\n      args: [DynamicFormControlContainerComponent]\n    }]\n  });\n})();\n\nclass DynamicBasicFormComponent extends DynamicFormComponent {\n  constructor(changeDetectorRef, componentService) {\n    super(changeDetectorRef, componentService);\n    this.changeDetectorRef = changeDetectorRef;\n    this.componentService = componentService;\n    this.blur = new EventEmitter();\n    this.change = new EventEmitter();\n    this.focus = new EventEmitter();\n  }\n\n}\n\nDynamicBasicFormComponent.ɵfac = function DynamicBasicFormComponent_Factory(t) {\n  return new (t || DynamicBasicFormComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DynamicFormComponentService));\n};\n\nDynamicBasicFormComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DynamicBasicFormComponent,\n  selectors: [[\"dynamic-basic-form\"]],\n  contentQueries: function DynamicBasicFormComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, DynamicTemplateDirective, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  viewQuery: function DynamicBasicFormComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(DynamicBasicFormControlContainerComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.components = _t);\n    }\n  },\n  inputs: {\n    group: \"group\",\n    model: \"model\",\n    layout: \"layout\"\n  },\n  outputs: {\n    blur: \"blur\",\n    change: \"change\",\n    focus: \"focus\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 2,\n  consts: [[3, \"group\", \"hidden\", \"layout\", \"model\", \"templates\", \"blur\", \"change\", \"focus\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"group\", \"hidden\", \"layout\", \"model\", \"templates\", \"blur\", \"change\", \"focus\"]],\n  template: function DynamicBasicFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, DynamicBasicFormComponent_dynamic_basic_form_control_0_Template, 1, 5, \"dynamic-basic-form-control\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.model)(\"ngForTrackBy\", ctx.trackByFn);\n    }\n  },\n  directives: [DynamicBasicFormControlContainerComponent, i3.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicBasicFormComponent, [{\n    type: Component,\n    args: [{\n      selector: \"dynamic-basic-form\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<dynamic-basic-form-control *ngFor=\\\"let controlModel of model; trackBy: trackByFn\\\"\\n                            [group]=\\\"group\\\"\\n                            [hidden]=\\\"controlModel.hidden\\\"\\n                            [layout]=\\\"layout\\\"\\n                            [model]=\\\"controlModel\\\"\\n                            [templates]=\\\"templates\\\"\\n                            (blur)=\\\"onBlur($event)\\\"\\n                            (change)=\\\"onChange($event)\\\"\\n                            (focus)=\\\"onFocus($event)\\\"></dynamic-basic-form-control>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.DynamicFormComponentService\n    }];\n  }, {\n    group: [{\n      type: Input\n    }],\n    model: [{\n      type: Input\n    }],\n    layout: [{\n      type: Input\n    }],\n    blur: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [DynamicTemplateDirective]\n    }],\n    components: [{\n      type: ViewChildren,\n      args: [DynamicBasicFormControlContainerComponent]\n    }]\n  });\n})();\n\nclass DynamicFormsBasicUIModule {}\n\nDynamicFormsBasicUIModule.ɵfac = function DynamicFormsBasicUIModule_Factory(t) {\n  return new (t || DynamicFormsBasicUIModule)();\n};\n\nDynamicFormsBasicUIModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DynamicFormsBasicUIModule\n});\nDynamicFormsBasicUIModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[FormsModule, CommonModule, ReactiveFormsModule, NgxMaskModule, DynamicFormsCoreModule], DynamicFormsCoreModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DynamicFormsBasicUIModule, [{\n    type: NgModule,\n    args: [{\n      imports: [FormsModule, CommonModule, ReactiveFormsModule, NgxMaskModule, DynamicFormsCoreModule],\n      declarations: [DynamicBasicCheckboxComponent, DynamicBasicFormArrayComponent, DynamicBasicFormComponent, DynamicBasicFormControlContainerComponent, DynamicBasicFormGroupComponent, DynamicBasicInputComponent, DynamicBasicRadioGroupComponent, DynamicBasicSelectComponent, DynamicBasicTextAreaComponent],\n      exports: [DynamicFormsCoreModule, DynamicBasicCheckboxComponent, DynamicBasicFormArrayComponent, DynamicBasicFormComponent, DynamicBasicFormControlContainerComponent, DynamicBasicFormGroupComponent, DynamicBasicInputComponent, DynamicBasicRadioGroupComponent, DynamicBasicSelectComponent, DynamicBasicTextAreaComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DynamicBasicCheckboxComponent, DynamicBasicFormArrayComponent, DynamicBasicFormComponent, DynamicBasicFormControlContainerComponent, DynamicBasicFormGroupComponent, DynamicBasicInputComponent, DynamicBasicRadioGroupComponent, DynamicBasicSelectComponent, DynamicBasicTextAreaComponent, DynamicFormsBasicUIModule, basicUIFormControlMapFn };","map":{"version":3,"sources":["C:/Users/Patrick Brix/Desktop/form-builder/form-builder/node_modules/@ng-dynamic-forms/ui-basic/fesm2015/ui-basic.mjs"],"names":["i0","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","ViewContainerRef","ContentChildren","HostBinding","ViewChild","ViewChildren","forwardRef","NgModule","i1","DynamicFormControlComponent","DynamicFormControlContainerComponent","DynamicTemplateDirective","DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA","DYNAMIC_FORM_CONTROL_TYPE_SELECT","DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP","DYNAMIC_FORM_CONTROL_TYPE_INPUT","DYNAMIC_FORM_CONTROL_TYPE_GROUP","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP","DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX","DYNAMIC_FORM_CONTROL_TYPE_ARRAY","DynamicFormArrayComponent","DynamicFormGroupComponent","DynamicFormComponent","DynamicFormsCoreModule","i2","FormsModule","ReactiveFormsModule","i3","CommonModule","i4","NgxMaskModule","DynamicBasicCheckboxComponent","constructor","layoutService","validationService","blur","change","focus","ɵfac","DynamicFormLayoutService","DynamicFormValidationService","ɵcmp","NgControlStatusGroup","FormGroupDirective","NgClass","CheckboxControlValueAccessor","CheckboxRequiredValidator","NgControlStatus","FormControlName","type","args","selector","changeDetection","OnPush","template","formLayout","group","layout","model","DynamicBasicInputComponent","NgIf","DefaultValueAccessor","DynamicListDirective","MaxLengthValidator","MinLengthValidator","PatternValidator","RequiredValidator","MaskDirective","NgForOf","NgSelectOption","ɵNgSelectMultipleOption","AsyncPipe","DynamicBasicRadioGroupComponent","RadioControlValueAccessor","DynamicBasicSelectComponent","SelectControlValueAccessor","DynamicBasicTextAreaComponent","DynamicBasicFormControlContainerComponent","changeDetectorRef","componentFactoryResolver","componentService","relationService","context","componentType","_a","getCustomComponentType","basicUIFormControlMapFn","ChangeDetectorRef","ComponentFactoryResolver","DynamicFormComponentService","DynamicFormRelationService","NgTemplateOutlet","contentTemplateList","klass","hostClass","inputTemplateList","componentViewContainerRef","read","static","DynamicBasicFormArrayComponent","DynamicBasicFormGroupComponent","customEvent","FormArrayName","FormGroupName","templates","components","DynamicBasicFormComponent","DynamicFormsBasicUIModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewContainerRef, ContentChildren, HostBinding, ViewChild, ViewChildren, forwardRef, NgModule } from '@angular/core';\nimport * as i1 from '@ng-dynamic-forms/core';\nimport { DynamicFormControlComponent, DynamicFormControlContainerComponent, DynamicTemplateDirective, DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DYNAMIC_FORM_CONTROL_TYPE_SELECT, DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP, DYNAMIC_FORM_CONTROL_TYPE_INPUT, DYNAMIC_FORM_CONTROL_TYPE_GROUP, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DynamicFormArrayComponent, DynamicFormGroupComponent, DynamicFormComponent, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';\nimport * as i2 from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from 'ngx-mask';\nimport { NgxMaskModule } from 'ngx-mask';\n\nclass DynamicBasicCheckboxComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicBasicCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicCheckboxComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });\nDynamicBasicCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.1\", type: DynamicBasicCheckboxComponent, selector: \"dynamic-basic-checkbox\", inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, usesInheritance: true, ngImport: i0, template: \"<label [formGroup]=\\\"group\\\" [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\">\\n\\n    <input type=\\\"checkbox\\\"\\n           [checked]=\\\"model.checked\\\"\\n           [formControlName]=\\\"model.id\\\"\\n           [id]=\\\"id\\\"\\n           [indeterminate]=\\\"model.indeterminate\\\"\\n           [name]=\\\"model.name\\\"\\n           [required]=\\\"model.required\\\"\\n           [tabindex]=\\\"model.tabIndex\\\"\\n           [value]=\\\"model.value\\\"\\n           (blur)=\\\"onBlur($event)\\\"\\n           (change)=\\\"onChange($event)\\\"\\n           (focus)=\\\"onFocus($event)\\\"/><span [ngClass]=\\\"getClass('element', 'label')\\\"\\n                                            [innerHTML]=\\\"model.label\\\"></span></label>\\n\", directives: [{ type: i2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { type: i2.CheckboxRequiredValidator, selector: \"input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]\" }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicCheckboxComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"dynamic-basic-checkbox\", changeDetection: ChangeDetectionStrategy.OnPush, template: \"<label [formGroup]=\\\"group\\\" [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\">\\n\\n    <input type=\\\"checkbox\\\"\\n           [checked]=\\\"model.checked\\\"\\n           [formControlName]=\\\"model.id\\\"\\n           [id]=\\\"id\\\"\\n           [indeterminate]=\\\"model.indeterminate\\\"\\n           [name]=\\\"model.name\\\"\\n           [required]=\\\"model.required\\\"\\n           [tabindex]=\\\"model.tabIndex\\\"\\n           [value]=\\\"model.value\\\"\\n           (blur)=\\\"onBlur($event)\\\"\\n           (change)=\\\"onChange($event)\\\"\\n           (focus)=\\\"onFocus($event)\\\"/><span [ngClass]=\\\"getClass('element', 'label')\\\"\\n                                            [innerHTML]=\\\"model.label\\\"></span></label>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{\n                type: Input\n            }], group: [{\n                type: Input\n            }], layout: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], blur: [{\n                type: Output\n            }], change: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }] } });\n\nclass DynamicBasicInputComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicBasicInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicInputComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });\nDynamicBasicInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.1\", type: DynamicBasicInputComponent, selector: \"dynamic-basic-input\", inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, usesInheritance: true, ngImport: i0, template: \"<div [formGroup]=\\\"group\\\">\\n\\n    <input *ngIf=\\\"model.inputType === 'file'; else maskedInput\\\"\\n           [attr.accept]=\\\"model.accept\\\"\\n           [attr.max]=\\\"model.max\\\"\\n           [attr.min]=\\\"model.min\\\"\\n           [attr.multiple]=\\\"model.multiple\\\"\\n           [attr.step]=\\\"model.step\\\"\\n           [autocomplete]=\\\"model.autoComplete\\\"\\n           [autofocus]=\\\"model.autoFocus\\\"\\n           [dynamicList]=\\\"model.listId\\\"\\n           [formControlName]=\\\"model.id\\\"\\n           [id]=\\\"id\\\"\\n           [maxlength]=\\\"model.maxLength\\\"\\n           [minlength]=\\\"model.minLength\\\"\\n           [name]=\\\"model.name\\\"\\n           [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n           [pattern]=\\\"model.pattern\\\"\\n           [placeholder]=\\\"model.placeholder\\\"\\n           [readonly]=\\\"model.readOnly\\\"\\n           [required]=\\\"model.required\\\"\\n           [spellcheck]=\\\"model.spellCheck\\\"\\n           [tabindex]=\\\"model.tabIndex\\\"\\n           [type]=\\\"model.inputType\\\"\\n           (blur)=\\\"onBlur($event)\\\"\\n           (change)=\\\"onChange($event)\\\"\\n           (focus)=\\\"onFocus($event)\\\"/>\\n\\n    <ng-template #maskedInput>\\n        <input class=\\\"form-control\\\"\\n               [attr.accept]=\\\"model.accept\\\"\\n               [attr.max]=\\\"model.max\\\"\\n               [attr.min]=\\\"model.min\\\"\\n               [attr.multiple]=\\\"model.multiple\\\"\\n               [attr.step]=\\\"model.step\\\"\\n               [autocomplete]=\\\"model.autoComplete\\\"\\n               [autofocus]=\\\"model.autoFocus\\\"\\n               [dynamicList]=\\\"model.listId\\\"\\n               [formControlName]=\\\"model.id\\\"\\n               [id]=\\\"id\\\"\\n               [maxlength]=\\\"model.maxLength\\\"\\n               [minlength]=\\\"model.minLength\\\"\\n               [name]=\\\"model.name\\\"\\n               [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n               [pattern]=\\\"model.pattern\\\"\\n               [placeholder]=\\\"model.placeholder\\\"\\n               [readonly]=\\\"model.readOnly\\\"\\n               [required]=\\\"model.required\\\"\\n               [spellcheck]=\\\"model.spellCheck\\\"\\n               [tabindex]=\\\"model.tabIndex\\\"\\n               [mask]=\\\"model.mask\\\"\\n               [specialCharacters]=\\\"model.maskConfig?.specialCharacters\\\"\\n               [patterns]=\\\"model.maskConfig?.patterns\\\"\\n               [prefix]=\\\"model.maskConfig?.prefix\\\"\\n               [suffix]=\\\"model.maskConfig?.suffix\\\"\\n               [thousandSeparator]=\\\"model.maskConfig?.thousandSeparator\\\"\\n               [decimalMarker]=\\\"model.maskConfig?.decimalMarker\\\"\\n               [dropSpecialCharacters]=\\\"model.maskConfig?.dropSpecialCharacters\\\"\\n               [hiddenInput]=\\\"model.maskConfig?.hiddenInput\\\"\\n               [showMaskTyped]=\\\"model.maskConfig?.showMaskTyped\\\"\\n               [placeHolderCharacter]=\\\"model.maskConfig?.placeHolderCharacter\\\"\\n               [shownMaskExpression]=\\\"model.maskConfig?.shownMaskExpression\\\"\\n               [showTemplate]=\\\"model.maskConfig?.showTemplate\\\"\\n               [clearIfNotMatch]=\\\"model.maskConfig.clearIfNotMatch\\\"\\n               [validation]=\\\"model.maskConfig.validation\\\"\\n               [separatorLimit]=\\\"model.maskConfig.separatorLimit\\\"\\n               [allowNegativeNumbers]=\\\"model.maskConfig.allowNegativeNumbers\\\"\\n               [leadZeroDateTime]=\\\"model.maskConfig.leadZeroDateTime\\\"\\n               [type]=\\\"model.inputType\\\"\\n               (blur)=\\\"onBlur($event)\\\"\\n               (change)=\\\"onChange($event)\\\"\\n               (focus)=\\\"onFocus($event)\\\"/>\\n    </ng-template>\\n\\n    <datalist *ngIf=\\\"model.hasList\\\" [id]=\\\"model.listId\\\">\\n        <option *ngFor=\\\"let option of model.list$ | async\\\" [value]=\\\"option\\\">\\n    </datalist>\\n\\n</div>\\n\", directives: [{ type: i2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i1.DynamicListDirective, selector: \"[dynamicList]\", inputs: [\"dynamicList\"] }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i2.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { type: i2.MinLengthValidator, selector: \"[minlength][formControlName],[minlength][formControl],[minlength][ngModel]\", inputs: [\"minlength\"] }, { type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.PatternValidator, selector: \"[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\", inputs: [\"pattern\"] }, { type: i2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i4.MaskDirective, selector: \"input[mask], textarea[mask]\", inputs: [\"mask\", \"specialCharacters\", \"patterns\", \"prefix\", \"suffix\", \"thousandSeparator\", \"decimalMarker\", \"dropSpecialCharacters\", \"hiddenInput\", \"showMaskTyped\", \"placeHolderCharacter\", \"shownMaskExpression\", \"showTemplate\", \"clearIfNotMatch\", \"validation\", \"separatorLimit\", \"allowNegativeNumbers\", \"leadZeroDateTime\", \"triggerOnMaskChange\"], outputs: [\"maskFilled\"], exportAs: [\"mask\", \"ngxMask\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i2.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }], pipes: { \"async\": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicInputComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"dynamic-basic-input\", changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div [formGroup]=\\\"group\\\">\\n\\n    <input *ngIf=\\\"model.inputType === 'file'; else maskedInput\\\"\\n           [attr.accept]=\\\"model.accept\\\"\\n           [attr.max]=\\\"model.max\\\"\\n           [attr.min]=\\\"model.min\\\"\\n           [attr.multiple]=\\\"model.multiple\\\"\\n           [attr.step]=\\\"model.step\\\"\\n           [autocomplete]=\\\"model.autoComplete\\\"\\n           [autofocus]=\\\"model.autoFocus\\\"\\n           [dynamicList]=\\\"model.listId\\\"\\n           [formControlName]=\\\"model.id\\\"\\n           [id]=\\\"id\\\"\\n           [maxlength]=\\\"model.maxLength\\\"\\n           [minlength]=\\\"model.minLength\\\"\\n           [name]=\\\"model.name\\\"\\n           [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n           [pattern]=\\\"model.pattern\\\"\\n           [placeholder]=\\\"model.placeholder\\\"\\n           [readonly]=\\\"model.readOnly\\\"\\n           [required]=\\\"model.required\\\"\\n           [spellcheck]=\\\"model.spellCheck\\\"\\n           [tabindex]=\\\"model.tabIndex\\\"\\n           [type]=\\\"model.inputType\\\"\\n           (blur)=\\\"onBlur($event)\\\"\\n           (change)=\\\"onChange($event)\\\"\\n           (focus)=\\\"onFocus($event)\\\"/>\\n\\n    <ng-template #maskedInput>\\n        <input class=\\\"form-control\\\"\\n               [attr.accept]=\\\"model.accept\\\"\\n               [attr.max]=\\\"model.max\\\"\\n               [attr.min]=\\\"model.min\\\"\\n               [attr.multiple]=\\\"model.multiple\\\"\\n               [attr.step]=\\\"model.step\\\"\\n               [autocomplete]=\\\"model.autoComplete\\\"\\n               [autofocus]=\\\"model.autoFocus\\\"\\n               [dynamicList]=\\\"model.listId\\\"\\n               [formControlName]=\\\"model.id\\\"\\n               [id]=\\\"id\\\"\\n               [maxlength]=\\\"model.maxLength\\\"\\n               [minlength]=\\\"model.minLength\\\"\\n               [name]=\\\"model.name\\\"\\n               [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n               [pattern]=\\\"model.pattern\\\"\\n               [placeholder]=\\\"model.placeholder\\\"\\n               [readonly]=\\\"model.readOnly\\\"\\n               [required]=\\\"model.required\\\"\\n               [spellcheck]=\\\"model.spellCheck\\\"\\n               [tabindex]=\\\"model.tabIndex\\\"\\n               [mask]=\\\"model.mask\\\"\\n               [specialCharacters]=\\\"model.maskConfig?.specialCharacters\\\"\\n               [patterns]=\\\"model.maskConfig?.patterns\\\"\\n               [prefix]=\\\"model.maskConfig?.prefix\\\"\\n               [suffix]=\\\"model.maskConfig?.suffix\\\"\\n               [thousandSeparator]=\\\"model.maskConfig?.thousandSeparator\\\"\\n               [decimalMarker]=\\\"model.maskConfig?.decimalMarker\\\"\\n               [dropSpecialCharacters]=\\\"model.maskConfig?.dropSpecialCharacters\\\"\\n               [hiddenInput]=\\\"model.maskConfig?.hiddenInput\\\"\\n               [showMaskTyped]=\\\"model.maskConfig?.showMaskTyped\\\"\\n               [placeHolderCharacter]=\\\"model.maskConfig?.placeHolderCharacter\\\"\\n               [shownMaskExpression]=\\\"model.maskConfig?.shownMaskExpression\\\"\\n               [showTemplate]=\\\"model.maskConfig?.showTemplate\\\"\\n               [clearIfNotMatch]=\\\"model.maskConfig.clearIfNotMatch\\\"\\n               [validation]=\\\"model.maskConfig.validation\\\"\\n               [separatorLimit]=\\\"model.maskConfig.separatorLimit\\\"\\n               [allowNegativeNumbers]=\\\"model.maskConfig.allowNegativeNumbers\\\"\\n               [leadZeroDateTime]=\\\"model.maskConfig.leadZeroDateTime\\\"\\n               [type]=\\\"model.inputType\\\"\\n               (blur)=\\\"onBlur($event)\\\"\\n               (change)=\\\"onChange($event)\\\"\\n               (focus)=\\\"onFocus($event)\\\"/>\\n    </ng-template>\\n\\n    <datalist *ngIf=\\\"model.hasList\\\" [id]=\\\"model.listId\\\">\\n        <option *ngFor=\\\"let option of model.list$ | async\\\" [value]=\\\"option\\\">\\n    </datalist>\\n\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{\n                type: Input\n            }], group: [{\n                type: Input\n            }], layout: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], blur: [{\n                type: Output\n            }], change: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }] } });\n\nclass DynamicBasicRadioGroupComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicBasicRadioGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicRadioGroupComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });\nDynamicBasicRadioGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.1\", type: DynamicBasicRadioGroupComponent, selector: \"dynamic-basic-radio-group\", inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, usesInheritance: true, ngImport: i0, template: \"<fieldset role=\\\"radiogroup\\\"\\n          [formGroup]=\\\"group\\\"\\n          [id]=\\\"id\\\"\\n          [name]=\\\"model.name\\\"\\n          [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n          [tabindex]=\\\"model.tabIndex\\\"\\n          (change)=\\\"onChange($event)\\\">\\n\\n    <legend *ngIf=\\\"model.legend\\\" [innerHTML]=\\\"model.legend\\\"></legend>\\n\\n    <label *ngFor=\\\"let option of model.options$ | async\\\" [ngClass]=\\\"getClass('element', 'option')\\\">\\n\\n        <input type=\\\"radio\\\"\\n               [formControlName]=\\\"model.id\\\"\\n               [name]=\\\"model.name\\\"\\n               [value]=\\\"option.value\\\"\\n               (blur)=\\\"onBlur($event)\\\"\\n               (focus)=\\\"onFocus($event)\\\"/><span [innerHTML]=\\\"option.label\\\"></span></label>\\n</fieldset>\\n\", directives: [{ type: i2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.RadioControlValueAccessor, selector: \"input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]\", inputs: [\"name\", \"formControlName\", \"value\"] }, { type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }], pipes: { \"async\": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicRadioGroupComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"dynamic-basic-radio-group\", changeDetection: ChangeDetectionStrategy.OnPush, template: \"<fieldset role=\\\"radiogroup\\\"\\n          [formGroup]=\\\"group\\\"\\n          [id]=\\\"id\\\"\\n          [name]=\\\"model.name\\\"\\n          [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n          [tabindex]=\\\"model.tabIndex\\\"\\n          (change)=\\\"onChange($event)\\\">\\n\\n    <legend *ngIf=\\\"model.legend\\\" [innerHTML]=\\\"model.legend\\\"></legend>\\n\\n    <label *ngFor=\\\"let option of model.options$ | async\\\" [ngClass]=\\\"getClass('element', 'option')\\\">\\n\\n        <input type=\\\"radio\\\"\\n               [formControlName]=\\\"model.id\\\"\\n               [name]=\\\"model.name\\\"\\n               [value]=\\\"option.value\\\"\\n               (blur)=\\\"onBlur($event)\\\"\\n               (focus)=\\\"onFocus($event)\\\"/><span [innerHTML]=\\\"option.label\\\"></span></label>\\n</fieldset>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{\n                type: Input\n            }], group: [{\n                type: Input\n            }], layout: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], blur: [{\n                type: Output\n            }], change: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }] } });\n\nclass DynamicBasicSelectComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicBasicSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicSelectComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });\nDynamicBasicSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.1\", type: DynamicBasicSelectComponent, selector: \"dynamic-basic-select\", inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, usesInheritance: true, ngImport: i0, template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <select [compareWith]=\\\"model.compareWithFn\\\"\\n            [formControlName]=\\\"model.id\\\"\\n            [id]=\\\"id\\\"\\n            [name]=\\\"model.name\\\"\\n            [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n            [required]=\\\"model.required\\\"\\n            [tabindex]=\\\"model.tabIndex\\\"\\n            (blur)=\\\"onBlur($event)\\\"\\n            (change)=\\\"onChange($event)\\\"\\n            (focus)=\\\"onFocus($event)\\\">\\n\\n        <option *ngFor=\\\"let option of model.options$ | async\\\"\\n                [disabled]=\\\"option.disabled\\\"\\n                [ngValue]=\\\"option.value\\\">{{ option.label }}\\n        </option>\\n\\n    </select>\\n\\n</ng-container>\\n\", directives: [{ type: i2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i2.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i2.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }], pipes: { \"async\": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicSelectComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"dynamic-basic-select\", changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <select [compareWith]=\\\"model.compareWithFn\\\"\\n            [formControlName]=\\\"model.id\\\"\\n            [id]=\\\"id\\\"\\n            [name]=\\\"model.name\\\"\\n            [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n            [required]=\\\"model.required\\\"\\n            [tabindex]=\\\"model.tabIndex\\\"\\n            (blur)=\\\"onBlur($event)\\\"\\n            (change)=\\\"onChange($event)\\\"\\n            (focus)=\\\"onFocus($event)\\\">\\n\\n        <option *ngFor=\\\"let option of model.options$ | async\\\"\\n                [disabled]=\\\"option.disabled\\\"\\n                [ngValue]=\\\"option.value\\\">{{ option.label }}\\n        </option>\\n\\n    </select>\\n\\n</ng-container>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{\n                type: Input\n            }], group: [{\n                type: Input\n            }], layout: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], blur: [{\n                type: Output\n            }], change: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }] } });\n\nclass DynamicBasicTextAreaComponent extends DynamicFormControlComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicBasicTextAreaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicTextAreaComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });\nDynamicBasicTextAreaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.1\", type: DynamicBasicTextAreaComponent, selector: \"dynamic-basic-textarea\", inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, usesInheritance: true, ngImport: i0, template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <textarea [cols]=\\\"model.cols\\\"\\n              [formControlName]=\\\"model.id\\\"\\n              [id]=\\\"id\\\"\\n              [maxlength]=\\\"model.maxLength\\\"\\n              [minlength]=\\\"model.minLength\\\"\\n              [name]=\\\"model.name\\\"\\n              [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n              [placeholder]=\\\"model.placeholder\\\"\\n              [readonly]=\\\"model.readOnly\\\"\\n              [required]=\\\"model.required\\\"\\n              [rows]=\\\"model.rows\\\"\\n              [spellcheck]=\\\"model.spellCheck\\\"\\n              [tabindex]=\\\"model.tabIndex\\\"\\n              [wrap]=\\\"model.wrap\\\"\\n              (blur)=\\\"onBlur($event)\\\"\\n              (change)=\\\"onChange($event)\\\"\\n              (focus)=\\\"onFocus($event)\\\"></textarea>\\n\\n</ng-container>\\n\", directives: [{ type: i2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i2.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i2.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { type: i2.MinLengthValidator, selector: \"[minlength][formControlName],[minlength][formControl],[minlength][ngModel]\", inputs: [\"minlength\"] }, { type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicTextAreaComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"dynamic-basic-textarea\", changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <textarea [cols]=\\\"model.cols\\\"\\n              [formControlName]=\\\"model.id\\\"\\n              [id]=\\\"id\\\"\\n              [maxlength]=\\\"model.maxLength\\\"\\n              [minlength]=\\\"model.minLength\\\"\\n              [name]=\\\"model.name\\\"\\n              [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"\\n              [placeholder]=\\\"model.placeholder\\\"\\n              [readonly]=\\\"model.readOnly\\\"\\n              [required]=\\\"model.required\\\"\\n              [rows]=\\\"model.rows\\\"\\n              [spellcheck]=\\\"model.spellCheck\\\"\\n              [tabindex]=\\\"model.tabIndex\\\"\\n              [wrap]=\\\"model.wrap\\\"\\n              (blur)=\\\"onBlur($event)\\\"\\n              (change)=\\\"onChange($event)\\\"\\n              (focus)=\\\"onFocus($event)\\\"></textarea>\\n\\n</ng-container>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{\n                type: Input\n            }], group: [{\n                type: Input\n            }], layout: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], blur: [{\n                type: Output\n            }], change: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }] } });\n\nclass DynamicBasicFormControlContainerComponent extends DynamicFormControlContainerComponent {\n    constructor(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService) {\n        super(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService);\n        this.changeDetectorRef = changeDetectorRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.componentService = componentService;\n        this.relationService = relationService;\n        this.context = null;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n    get componentType() {\n        var _a;\n        return (_a = this.componentService.getCustomComponentType(this.model)) !== null && _a !== void 0 ? _a : basicUIFormControlMapFn(this.model);\n    }\n}\nDynamicBasicFormControlContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicFormControlContainerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ComponentFactoryResolver }, { token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }, { token: i1.DynamicFormComponentService }, { token: i1.DynamicFormRelationService }], target: i0.ɵɵFactoryTarget.Component });\nDynamicBasicFormControlContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.1\", type: DynamicBasicFormControlContainerComponent, selector: \"dynamic-basic-form-control\", inputs: { context: \"context\", group: \"group\", hostClass: \"hostClass\", inputTemplateList: [\"templates\", \"inputTemplateList\"], layout: \"layout\", model: \"model\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, host: { properties: { \"class\": \"this.klass\" } }, queries: [{ propertyName: \"contentTemplateList\", predicate: DynamicTemplateDirective }], viewQueries: [{ propertyName: \"componentViewContainerRef\", first: true, predicate: [\"componentViewContainer\"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0, template: \"<div [formGroup]=\\\"group\\\" [ngClass]=\\\"['ng-dynamic-forms-'+model.type.toLowerCase(), getClass('element', 'container'), getClass('grid', 'container')]\\\">\\n\\n    <label *ngIf=\\\"!isCheckbox && hasLabel\\\"\\n           [for]=\\\"id\\\"\\n           [innerHTML]=\\\"model.label\\\"\\n           [ngClass]=\\\"[getClass('element', 'label'), getClass('grid', 'label')]\\\"></label>\\n\\n    <ng-container *ngTemplateOutlet=\\\"startTemplate?.templateRef; context: model\\\"></ng-container>\\n\\n    <ng-container #componentViewContainer></ng-container>\\n\\n    <div *ngIf=\\\"hasHint\\\" [ngClass]=\\\"[getClass('element', 'hint'), getClass('grid', 'hint')]\\\">\\n        <span [innerHTML]=\\\"hint\\\"></span>\\n    </div>\\n\\n    <ul *ngIf=\\\"showErrorMessages\\\" [ngClass]=\\\"[getClass('element', 'errors'), getClass('grid', 'errors')]\\\">\\n        <li *ngFor=\\\"let message of errorMessages\\\">{{ message }}</li>\\n    </ul>\\n\\n    <ng-container *ngTemplateOutlet=\\\"endTemplate?.templateRef; context: model\\\"></ng-container>\\n\\n    <ng-content></ng-content>\\n\\n</div>\\n\", directives: [{ type: i2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicFormControlContainerComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"dynamic-basic-form-control\", changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div [formGroup]=\\\"group\\\" [ngClass]=\\\"['ng-dynamic-forms-'+model.type.toLowerCase(), getClass('element', 'container'), getClass('grid', 'container')]\\\">\\n\\n    <label *ngIf=\\\"!isCheckbox && hasLabel\\\"\\n           [for]=\\\"id\\\"\\n           [innerHTML]=\\\"model.label\\\"\\n           [ngClass]=\\\"[getClass('element', 'label'), getClass('grid', 'label')]\\\"></label>\\n\\n    <ng-container *ngTemplateOutlet=\\\"startTemplate?.templateRef; context: model\\\"></ng-container>\\n\\n    <ng-container #componentViewContainer></ng-container>\\n\\n    <div *ngIf=\\\"hasHint\\\" [ngClass]=\\\"[getClass('element', 'hint'), getClass('grid', 'hint')]\\\">\\n        <span [innerHTML]=\\\"hint\\\"></span>\\n    </div>\\n\\n    <ul *ngIf=\\\"showErrorMessages\\\" [ngClass]=\\\"[getClass('element', 'errors'), getClass('grid', 'errors')]\\\">\\n        <li *ngFor=\\\"let message of errorMessages\\\">{{ message }}</li>\\n    </ul>\\n\\n    <ng-container *ngTemplateOutlet=\\\"endTemplate?.templateRef; context: model\\\"></ng-container>\\n\\n    <ng-content></ng-content>\\n\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ComponentFactoryResolver }, { type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }, { type: i1.DynamicFormComponentService }, { type: i1.DynamicFormRelationService }]; }, propDecorators: { contentTemplateList: [{\n                type: ContentChildren,\n                args: [DynamicTemplateDirective]\n            }], klass: [{\n                type: HostBinding,\n                args: [\"class\"]\n            }], context: [{\n                type: Input\n            }], group: [{\n                type: Input\n            }], hostClass: [{\n                type: Input\n            }], inputTemplateList: [{\n                type: Input,\n                args: [\"templates\"]\n            }], layout: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], blur: [{\n                type: Output\n            }], change: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }], componentViewContainerRef: [{\n                type: ViewChild,\n                args: [\"componentViewContainer\", { read: ViewContainerRef, static: true }]\n            }] } });\nfunction basicUIFormControlMapFn(model) {\n    switch (model.type) {\n        case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n            return DynamicBasicFormArrayComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\n            return DynamicBasicCheckboxComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n            return DynamicBasicFormGroupComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n            return DynamicBasicFormGroupComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\n            return DynamicBasicInputComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\n            return DynamicBasicRadioGroupComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\n            return DynamicBasicSelectComponent;\n        case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\n            return DynamicBasicTextAreaComponent;\n        default:\n            return null;\n    }\n}\nclass DynamicBasicFormArrayComponent extends DynamicFormArrayComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.customEvent = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicBasicFormArrayComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicFormArrayComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });\nDynamicBasicFormArrayComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.1\", type: DynamicBasicFormArrayComponent, selector: \"dynamic-basic-form-array\", inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\", templates: \"templates\" }, outputs: { blur: \"blur\", change: \"change\", customEvent: \"customEvent\", focus: \"focus\" }, viewQueries: [{ propertyName: \"components\", predicate: i0.forwardRef(function () { return DynamicBasicFormControlContainerComponent; }), descendants: true }], usesInheritance: true, ngImport: i0, template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <div [formArrayName]=\\\"model.id\\\" [id]=\\\"id\\\" [ngClass]=\\\"getClass('element', 'control')\\\">\\n\\n        <div *ngFor=\\\"let groupModel of model.groups; let idx = index\\\" role=\\\"group\\\"\\n             [formGroupName]=\\\"idx\\\" [ngClass]=\\\"[getClass('element', 'group'), getClass('grid', 'group')]\\\">\\n\\n            <ng-container *ngTemplateOutlet=\\\"startTemplate?.templateRef; context: groupModel\\\"></ng-container>\\n\\n            <dynamic-basic-form-control *ngFor=\\\"let _model of groupModel.group\\\"\\n                                        [context]=\\\"groupModel\\\"\\n                                        [group]=\\\"array.at(idx)\\\"\\n                                        [hidden]=\\\"_model.hidden\\\"\\n                                        [layout]=\\\"formLayout\\\"\\n                                        [model]=\\\"_model\\\"\\n                                        [templates]=\\\"templates\\\"\\n                                        [hostClass]=\\\"[getClass('element','children'), getClass('grid','children')]\\\"\\n                                        (blur)=\\\"onBlur($event)\\\"\\n                                        (change)=\\\"onChange($event)\\\"\\n                                        (focus)=\\\"onFocus($event)\\\"\\n                                        (bsEvent)=\\\"onCustomEvent($event, null, true)\\\"></dynamic-basic-form-control>\\n\\n            <ng-container *ngTemplateOutlet=\\\"endTemplate?.templateRef; context: groupModel\\\"></ng-container>\\n\\n        </div>\\n\\n    </div>\\n\\n</ng-container>\\n\", components: [{ type: DynamicBasicFormControlContainerComponent, selector: \"dynamic-basic-form-control\", inputs: [\"context\", \"group\", \"hostClass\", \"templates\", \"layout\", \"model\"], outputs: [\"blur\", \"change\", \"focus\"] }], directives: [{ type: i2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i2.FormArrayName, selector: \"[formArrayName]\", inputs: [\"formArrayName\"] }, { type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.FormGroupName, selector: \"[formGroupName]\", inputs: [\"formGroupName\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicFormArrayComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"dynamic-basic-form-array\", template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <div [formArrayName]=\\\"model.id\\\" [id]=\\\"id\\\" [ngClass]=\\\"getClass('element', 'control')\\\">\\n\\n        <div *ngFor=\\\"let groupModel of model.groups; let idx = index\\\" role=\\\"group\\\"\\n             [formGroupName]=\\\"idx\\\" [ngClass]=\\\"[getClass('element', 'group'), getClass('grid', 'group')]\\\">\\n\\n            <ng-container *ngTemplateOutlet=\\\"startTemplate?.templateRef; context: groupModel\\\"></ng-container>\\n\\n            <dynamic-basic-form-control *ngFor=\\\"let _model of groupModel.group\\\"\\n                                        [context]=\\\"groupModel\\\"\\n                                        [group]=\\\"array.at(idx)\\\"\\n                                        [hidden]=\\\"_model.hidden\\\"\\n                                        [layout]=\\\"formLayout\\\"\\n                                        [model]=\\\"_model\\\"\\n                                        [templates]=\\\"templates\\\"\\n                                        [hostClass]=\\\"[getClass('element','children'), getClass('grid','children')]\\\"\\n                                        (blur)=\\\"onBlur($event)\\\"\\n                                        (change)=\\\"onChange($event)\\\"\\n                                        (focus)=\\\"onFocus($event)\\\"\\n                                        (bsEvent)=\\\"onCustomEvent($event, null, true)\\\"></dynamic-basic-form-control>\\n\\n            <ng-container *ngTemplateOutlet=\\\"endTemplate?.templateRef; context: groupModel\\\"></ng-container>\\n\\n        </div>\\n\\n    </div>\\n\\n</ng-container>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{\n                type: Input\n            }], group: [{\n                type: Input\n            }], layout: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], templates: [{\n                type: Input\n            }], blur: [{\n                type: Output\n            }], change: [{\n                type: Output\n            }], customEvent: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }], components: [{\n                type: ViewChildren,\n                args: [forwardRef(() => DynamicBasicFormControlContainerComponent)]\n            }] } });\nclass DynamicBasicFormGroupComponent extends DynamicFormGroupComponent {\n    constructor(layoutService, validationService) {\n        super(layoutService, validationService);\n        this.layoutService = layoutService;\n        this.validationService = validationService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.customEvent = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicBasicFormGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicFormGroupComponent, deps: [{ token: i1.DynamicFormLayoutService }, { token: i1.DynamicFormValidationService }], target: i0.ɵɵFactoryTarget.Component });\nDynamicBasicFormGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.1\", type: DynamicBasicFormGroupComponent, selector: \"dynamic-basic-form-group\", inputs: { formLayout: \"formLayout\", group: \"group\", layout: \"layout\", model: \"model\", templates: \"templates\" }, outputs: { blur: \"blur\", change: \"change\", customEvent: \"customEvent\", focus: \"focus\" }, viewQueries: [{ propertyName: \"components\", predicate: DynamicFormControlContainerComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <fieldset [formGroupName]=\\\"model.id\\\"\\n              [id]=\\\"id\\\"\\n              [name]=\\\"model.name\\\"\\n              [ngClass]=\\\"getClass('element', 'control')\\\">\\n\\n        <legend *ngIf=\\\"model.legend\\\" [innerHTML]=\\\"model.legend\\\"></legend>\\n\\n        <dynamic-basic-form-control *ngFor=\\\"let _model of model.group\\\"\\n                                    [group]=\\\"control\\\"\\n                                    [hidden]=\\\"_model.hidden\\\"\\n                                    [layout]=\\\"formLayout\\\"\\n                                    [model]=\\\"_model\\\"\\n                                    [templates]=\\\"templates\\\"\\n                                    [hostClass]=\\\"[getClass('element','children'), getClass('grid','children')]\\\"\\n                                    (blur)=\\\"onBlur($event)\\\"\\n                                    (change)=\\\"onChange($event)\\\"\\n                                    (focus)=\\\"onFocus($event)\\\"\\n                                    (bsEvent)=\\\"onCustomEvent($event, null, true)\\\"></dynamic-basic-form-control>\\n    </fieldset>\\n\\n</ng-container>\\n\", components: [{ type: DynamicBasicFormControlContainerComponent, selector: \"dynamic-basic-form-control\", inputs: [\"context\", \"group\", \"hostClass\", \"templates\", \"layout\", \"model\"], outputs: [\"blur\", \"change\", \"focus\"] }], directives: [{ type: i2.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i2.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i2.FormGroupName, selector: \"[formGroupName]\", inputs: [\"formGroupName\"] }, { type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicFormGroupComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"dynamic-basic-form-group\", template: \"<ng-container [formGroup]=\\\"group\\\">\\n\\n    <fieldset [formGroupName]=\\\"model.id\\\"\\n              [id]=\\\"id\\\"\\n              [name]=\\\"model.name\\\"\\n              [ngClass]=\\\"getClass('element', 'control')\\\">\\n\\n        <legend *ngIf=\\\"model.legend\\\" [innerHTML]=\\\"model.legend\\\"></legend>\\n\\n        <dynamic-basic-form-control *ngFor=\\\"let _model of model.group\\\"\\n                                    [group]=\\\"control\\\"\\n                                    [hidden]=\\\"_model.hidden\\\"\\n                                    [layout]=\\\"formLayout\\\"\\n                                    [model]=\\\"_model\\\"\\n                                    [templates]=\\\"templates\\\"\\n                                    [hostClass]=\\\"[getClass('element','children'), getClass('grid','children')]\\\"\\n                                    (blur)=\\\"onBlur($event)\\\"\\n                                    (change)=\\\"onChange($event)\\\"\\n                                    (focus)=\\\"onFocus($event)\\\"\\n                                    (bsEvent)=\\\"onCustomEvent($event, null, true)\\\"></dynamic-basic-form-control>\\n    </fieldset>\\n\\n</ng-container>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i1.DynamicFormLayoutService }, { type: i1.DynamicFormValidationService }]; }, propDecorators: { formLayout: [{\n                type: Input\n            }], group: [{\n                type: Input\n            }], layout: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], templates: [{\n                type: Input\n            }], blur: [{\n                type: Output\n            }], change: [{\n                type: Output\n            }], customEvent: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }], components: [{\n                type: ViewChildren,\n                args: [DynamicFormControlContainerComponent]\n            }] } });\n\nclass DynamicBasicFormComponent extends DynamicFormComponent {\n    constructor(changeDetectorRef, componentService) {\n        super(changeDetectorRef, componentService);\n        this.changeDetectorRef = changeDetectorRef;\n        this.componentService = componentService;\n        this.blur = new EventEmitter();\n        this.change = new EventEmitter();\n        this.focus = new EventEmitter();\n    }\n}\nDynamicBasicFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicFormComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DynamicFormComponentService }], target: i0.ɵɵFactoryTarget.Component });\nDynamicBasicFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.1\", type: DynamicBasicFormComponent, selector: \"dynamic-basic-form\", inputs: { group: \"group\", model: \"model\", layout: \"layout\" }, outputs: { blur: \"blur\", change: \"change\", focus: \"focus\" }, queries: [{ propertyName: \"templates\", predicate: DynamicTemplateDirective }], viewQueries: [{ propertyName: \"components\", predicate: DynamicBasicFormControlContainerComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: \"<dynamic-basic-form-control *ngFor=\\\"let controlModel of model; trackBy: trackByFn\\\"\\n                            [group]=\\\"group\\\"\\n                            [hidden]=\\\"controlModel.hidden\\\"\\n                            [layout]=\\\"layout\\\"\\n                            [model]=\\\"controlModel\\\"\\n                            [templates]=\\\"templates\\\"\\n                            (blur)=\\\"onBlur($event)\\\"\\n                            (change)=\\\"onChange($event)\\\"\\n                            (focus)=\\\"onFocus($event)\\\"></dynamic-basic-form-control>\\n\", components: [{ type: DynamicBasicFormControlContainerComponent, selector: \"dynamic-basic-form-control\", inputs: [\"context\", \"group\", \"hostClass\", \"templates\", \"layout\", \"model\"], outputs: [\"blur\", \"change\", \"focus\"] }], directives: [{ type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicBasicFormComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"dynamic-basic-form\", changeDetection: ChangeDetectionStrategy.OnPush, template: \"<dynamic-basic-form-control *ngFor=\\\"let controlModel of model; trackBy: trackByFn\\\"\\n                            [group]=\\\"group\\\"\\n                            [hidden]=\\\"controlModel.hidden\\\"\\n                            [layout]=\\\"layout\\\"\\n                            [model]=\\\"controlModel\\\"\\n                            [templates]=\\\"templates\\\"\\n                            (blur)=\\\"onBlur($event)\\\"\\n                            (change)=\\\"onChange($event)\\\"\\n                            (focus)=\\\"onFocus($event)\\\"></dynamic-basic-form-control>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DynamicFormComponentService }]; }, propDecorators: { group: [{\n                type: Input\n            }], model: [{\n                type: Input\n            }], layout: [{\n                type: Input\n            }], blur: [{\n                type: Output\n            }], change: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }], templates: [{\n                type: ContentChildren,\n                args: [DynamicTemplateDirective]\n            }], components: [{\n                type: ViewChildren,\n                args: [DynamicBasicFormControlContainerComponent]\n            }] } });\n\nclass DynamicFormsBasicUIModule {\n}\nDynamicFormsBasicUIModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicFormsBasicUIModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDynamicFormsBasicUIModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicFormsBasicUIModule, declarations: [DynamicBasicCheckboxComponent,\n        DynamicBasicFormArrayComponent,\n        DynamicBasicFormComponent,\n        DynamicBasicFormControlContainerComponent,\n        DynamicBasicFormGroupComponent,\n        DynamicBasicInputComponent,\n        DynamicBasicRadioGroupComponent,\n        DynamicBasicSelectComponent,\n        DynamicBasicTextAreaComponent], imports: [FormsModule,\n        CommonModule,\n        ReactiveFormsModule,\n        NgxMaskModule,\n        DynamicFormsCoreModule], exports: [DynamicFormsCoreModule,\n        DynamicBasicCheckboxComponent,\n        DynamicBasicFormArrayComponent,\n        DynamicBasicFormComponent,\n        DynamicBasicFormControlContainerComponent,\n        DynamicBasicFormGroupComponent,\n        DynamicBasicInputComponent,\n        DynamicBasicRadioGroupComponent,\n        DynamicBasicSelectComponent,\n        DynamicBasicTextAreaComponent] });\nDynamicFormsBasicUIModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicFormsBasicUIModule, imports: [[\n            FormsModule,\n            CommonModule,\n            ReactiveFormsModule,\n            NgxMaskModule,\n            DynamicFormsCoreModule\n        ], DynamicFormsCoreModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: DynamicFormsBasicUIModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        FormsModule,\n                        CommonModule,\n                        ReactiveFormsModule,\n                        NgxMaskModule,\n                        DynamicFormsCoreModule\n                    ],\n                    declarations: [\n                        DynamicBasicCheckboxComponent,\n                        DynamicBasicFormArrayComponent,\n                        DynamicBasicFormComponent,\n                        DynamicBasicFormControlContainerComponent,\n                        DynamicBasicFormGroupComponent,\n                        DynamicBasicInputComponent,\n                        DynamicBasicRadioGroupComponent,\n                        DynamicBasicSelectComponent,\n                        DynamicBasicTextAreaComponent\n                    ],\n                    exports: [\n                        DynamicFormsCoreModule,\n                        DynamicBasicCheckboxComponent,\n                        DynamicBasicFormArrayComponent,\n                        DynamicBasicFormComponent,\n                        DynamicBasicFormControlContainerComponent,\n                        DynamicBasicFormGroupComponent,\n                        DynamicBasicInputComponent,\n                        DynamicBasicRadioGroupComponent,\n                        DynamicBasicSelectComponent,\n                        DynamicBasicTextAreaComponent\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DynamicBasicCheckboxComponent, DynamicBasicFormArrayComponent, DynamicBasicFormComponent, DynamicBasicFormControlContainerComponent, DynamicBasicFormGroupComponent, DynamicBasicInputComponent, DynamicBasicRadioGroupComponent, DynamicBasicSelectComponent, DynamicBasicTextAreaComponent, DynamicFormsBasicUIModule, basicUIFormControlMapFn };\n"]},"metadata":{},"sourceType":"module"}